{
  "version": 3,
  "sources": ["../../svelte/src/runtime/store/index.js"],
  "sourcesContent": ["import {\r\n\trun_all,\r\n\tsubscribe,\r\n\tnoop,\r\n\tsafe_not_equal,\r\n\tis_function,\r\n\tget_store_value\r\n} from '../internal/index.js';\r\n\r\nconst subscriber_queue = [];\r\n\r\n/**\r\n * Creates a `Readable` store that allows reading by subscription.\r\n *\r\n * https://svelte.dev/docs/svelte-store#readable\r\n * @template T\r\n * @param {T} [value] initial value\r\n * @param {import('./public.js').StartStopNotifier<T>} [start]\r\n * @returns {import('./public.js').Readable<T>}\r\n */\r\nexport function readable(value, start) {\r\n\treturn {\r\n\t\tsubscribe: writable(value, start).subscribe\r\n\t};\r\n}\r\n\r\n/**\r\n * Create a `Writable` store that allows both updating and reading by subscription.\r\n *\r\n * https://svelte.dev/docs/svelte-store#writable\r\n * @template T\r\n * @param {T} [value] initial value\r\n * @param {import('./public.js').StartStopNotifier<T>} [start]\r\n * @returns {import('./public.js').Writable<T>}\r\n */\r\nexport function writable(value, start = noop) {\r\n\t/** @type {import('./public.js').Unsubscriber} */\r\n\tlet stop;\r\n\t/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */\r\n\tconst subscribers = new Set();\r\n\t/** @param {T} new_value\r\n\t * @returns {void}\r\n\t */\r\n\tfunction set(new_value) {\r\n\t\tif (safe_not_equal(value, new_value)) {\r\n\t\t\tvalue = new_value;\r\n\t\t\tif (stop) {\r\n\t\t\t\t// store is ready\r\n\t\t\t\tconst run_queue = !subscriber_queue.length;\r\n\t\t\t\tfor (const subscriber of subscribers) {\r\n\t\t\t\t\tsubscriber[1]();\r\n\t\t\t\t\tsubscriber_queue.push(subscriber, value);\r\n\t\t\t\t}\r\n\t\t\t\tif (run_queue) {\r\n\t\t\t\t\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\r\n\t\t\t\t\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsubscriber_queue.length = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {import('./public.js').Updater<T>} fn\r\n\t * @returns {void}\r\n\t */\r\n\tfunction update(fn) {\r\n\t\tset(fn(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {import('./public.js').Subscriber<T>} run\r\n\t * @param {import('./private.js').Invalidator<T>} [invalidate]\r\n\t * @returns {import('./public.js').Unsubscriber}\r\n\t */\r\n\tfunction subscribe(run, invalidate = noop) {\r\n\t\t/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */\r\n\t\tconst subscriber = [run, invalidate];\r\n\t\tsubscribers.add(subscriber);\r\n\t\tif (subscribers.size === 1) {\r\n\t\t\tstop = start(set, update) || noop;\r\n\t\t}\r\n\t\trun(value);\r\n\t\treturn () => {\r\n\t\t\tsubscribers.delete(subscriber);\r\n\t\t\tif (subscribers.size === 0 && stop) {\r\n\t\t\t\tstop();\r\n\t\t\t\tstop = null;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\treturn { set, update, subscribe };\r\n}\r\n\r\n/**\r\n * Derived value store by synchronizing one or more readable stores and\r\n * applying an aggregation function over its input values.\r\n *\r\n * https://svelte.dev/docs/svelte-store#derived\r\n * @template {import('./private.js').Stores} S\r\n * @template T\r\n * @overload\r\n * @param {S} stores - input stores\r\n * @param {(values: import('./private.js').StoresValues<S>, set: (value: T) => void, update: (fn: import('./public.js').Updater<T>) => void) => import('./public.js').Unsubscriber | void} fn - function callback that aggregates the values\r\n * @param {T} [initial_value] - initial value\r\n * @returns {import('./public.js').Readable<T>}\r\n */\r\n\r\n/**\r\n * Derived value store by synchronizing one or more readable stores and\r\n * applying an aggregation function over its input values.\r\n *\r\n * https://svelte.dev/docs/svelte-store#derived\r\n * @template {import('./private.js').Stores} S\r\n * @template T\r\n * @overload\r\n * @param {S} stores - input stores\r\n * @param {(values: import('./private.js').StoresValues<S>) => T} fn - function callback that aggregates the values\r\n * @param {T} [initial_value] - initial value\r\n * @returns {import('./public.js').Readable<T>}\r\n */\r\n\r\n/**\r\n * @template {import('./private.js').Stores} S\r\n * @template T\r\n * @param {S} stores\r\n * @param {Function} fn\r\n * @param {T} [initial_value]\r\n * @returns {import('./public.js').Readable<T>}\r\n */\r\nexport function derived(stores, fn, initial_value) {\r\n\tconst single = !Array.isArray(stores);\r\n\t/** @type {Array<import('./public.js').Readable<any>>} */\r\n\tconst stores_array = single ? [stores] : stores;\r\n\tif (!stores_array.every(Boolean)) {\r\n\t\tthrow new Error('derived() expects stores as input, got a falsy value');\r\n\t}\r\n\tconst auto = fn.length < 2;\r\n\treturn readable(initial_value, (set, update) => {\r\n\t\tlet started = false;\r\n\t\tconst values = [];\r\n\t\tlet pending = 0;\r\n\t\tlet cleanup = noop;\r\n\t\tconst sync = () => {\r\n\t\t\tif (pending) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcleanup();\r\n\t\t\tconst result = fn(single ? values[0] : values, set, update);\r\n\t\t\tif (auto) {\r\n\t\t\t\tset(result);\r\n\t\t\t} else {\r\n\t\t\t\tcleanup = is_function(result) ? result : noop;\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst unsubscribers = stores_array.map((store, i) =>\r\n\t\t\tsubscribe(\r\n\t\t\t\tstore,\r\n\t\t\t\t(value) => {\r\n\t\t\t\t\tvalues[i] = value;\r\n\t\t\t\t\tpending &= ~(1 << i);\r\n\t\t\t\t\tif (started) {\r\n\t\t\t\t\t\tsync();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\tpending |= 1 << i;\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t\tstarted = true;\r\n\t\tsync();\r\n\t\treturn function stop() {\r\n\t\t\trun_all(unsubscribers);\r\n\t\t\tcleanup();\r\n\t\t\t// We need to set this to false because callbacks can still happen despite having unsubscribed:\r\n\t\t\t// Callbacks might already be placed in the queue which doesn't know it should no longer\r\n\t\t\t// invoke this derived store.\r\n\t\t\tstarted = false;\r\n\t\t};\r\n\t});\r\n}\r\n\r\n/**\r\n * Takes a store and returns a new one derived from the old one that is readable.\r\n *\r\n * https://svelte.dev/docs/svelte-store#readonly\r\n * @template T\r\n * @param {import('./public.js').Readable<T>} store  - store to make readonly\r\n * @returns {import('./public.js').Readable<T>}\r\n */\r\nexport function readonly(store) {\r\n\treturn {\r\n\t\tsubscribe: store.subscribe.bind(store)\r\n\t};\r\n}\r\n\r\nexport { get_store_value as get };\r\n"],
  "mappings": ";;;;;;;;;AASA,IAAM,mBAAmB,CAAC;AAWnB,SAAS,SAAS,OAAO,OAAO;AACtC,SAAO;AAAA,IACN,WAAW,SAAS,OAAO,KAAK,EAAE;AAAA,EACnC;AACD;AAWO,SAAS,SAAS,OAAO,QAAQ,MAAM;AAE7C,MAAI;AAEJ,QAAM,cAAc,oBAAI,IAAI;AAI5B,WAAS,IAAI,WAAW;AACvB,QAAI,eAAe,OAAO,SAAS,GAAG;AACrC,cAAQ;AACR,UAAI,MAAM;AAET,cAAM,YAAY,CAAC,iBAAiB;AACpC,mBAAW,cAAc,aAAa;AACrC,qBAAW,CAAC,EAAE;AACd,2BAAiB,KAAK,YAAY,KAAK;AAAA,QACxC;AACA,YAAI,WAAW;AACd,mBAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK,GAAG;AACpD,6BAAiB,CAAC,EAAE,CAAC,EAAE,iBAAiB,IAAI,CAAC,CAAC;AAAA,UAC/C;AACA,2BAAiB,SAAS;AAAA,QAC3B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAMA,WAAS,OAAO,IAAI;AACnB,QAAI,GAAG,KAAK,CAAC;AAAA,EACd;AAOA,WAASA,WAAU,KAAK,aAAa,MAAM;AAE1C,UAAM,aAAa,CAAC,KAAK,UAAU;AACnC,gBAAY,IAAI,UAAU;AAC1B,QAAI,YAAY,SAAS,GAAG;AAC3B,aAAO,MAAM,KAAK,MAAM,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK;AACT,WAAO,MAAM;AACZ,kBAAY,OAAO,UAAU;AAC7B,UAAI,YAAY,SAAS,KAAK,MAAM;AACnC,aAAK;AACL,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AACA,SAAO,EAAE,KAAK,QAAQ,WAAAA,WAAU;AACjC;AAsCO,SAAS,QAAQ,QAAQ,IAAI,eAAe;AAClD,QAAM,SAAS,CAAC,MAAM,QAAQ,MAAM;AAEpC,QAAM,eAAe,SAAS,CAAC,MAAM,IAAI;AACzC,MAAI,CAAC,aAAa,MAAM,OAAO,GAAG;AACjC,UAAM,IAAI,MAAM,sDAAsD;AAAA,EACvE;AACA,QAAM,OAAO,GAAG,SAAS;AACzB,SAAO,SAAS,eAAe,CAAC,KAAK,WAAW;AAC/C,QAAI,UAAU;AACd,UAAM,SAAS,CAAC;AAChB,QAAI,UAAU;AACd,QAAI,UAAU;AACd,UAAM,OAAO,MAAM;AAClB,UAAI,SAAS;AACZ;AAAA,MACD;AACA,cAAQ;AACR,YAAM,SAAS,GAAG,SAAS,OAAO,CAAC,IAAI,QAAQ,KAAK,MAAM;AAC1D,UAAI,MAAM;AACT,YAAI,MAAM;AAAA,MACX,OAAO;AACN,kBAAU,YAAY,MAAM,IAAI,SAAS;AAAA,MAC1C;AAAA,IACD;AACA,UAAM,gBAAgB,aAAa;AAAA,MAAI,CAAC,OAAO,MAC9C;AAAA,QACC;AAAA,QACA,CAAC,UAAU;AACV,iBAAO,CAAC,IAAI;AACZ,qBAAW,EAAE,KAAK;AAClB,cAAI,SAAS;AACZ,iBAAK;AAAA,UACN;AAAA,QACD;AAAA,QACA,MAAM;AACL,qBAAW,KAAK;AAAA,QACjB;AAAA,MACD;AAAA,IACD;AACA,cAAU;AACV,SAAK;AACL,WAAO,SAAS,OAAO;AACtB,cAAQ,aAAa;AACrB,cAAQ;AAIR,gBAAU;AAAA,IACX;AAAA,EACD,CAAC;AACF;AAUO,SAAS,SAAS,OAAO;AAC/B,SAAO;AAAA,IACN,WAAW,MAAM,UAAU,KAAK,KAAK;AAAA,EACtC;AACD;",
  "names": ["subscribe"]
}
