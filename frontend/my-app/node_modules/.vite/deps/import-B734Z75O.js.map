{
  "version": 3,
  "sources": ["../../@sinclair/typebox/build/import/type/helpers/helpers.mjs", "../../@sinclair/typebox/build/import/type/awaited/awaited.mjs", "../../@sinclair/typebox/build/import/type/composite/composite.mjs", "../../@sinclair/typebox/build/import/type/date/date.mjs", "../../@sinclair/typebox/build/import/type/null/null.mjs", "../../@sinclair/typebox/build/import/type/symbol/symbol.mjs", "../../@sinclair/typebox/build/import/type/undefined/undefined.mjs", "../../@sinclair/typebox/build/import/type/uint8array/uint8array.mjs", "../../@sinclair/typebox/build/import/type/const/const.mjs", "../../@sinclair/typebox/build/import/type/constructor-parameters/constructor-parameters.mjs", "../../@sinclair/typebox/build/import/type/deref/deref.mjs", "../../@sinclair/typebox/build/import/type/enum/enum.mjs", "../../@sinclair/typebox/build/import/type/exclude/exclude-from-template-literal.mjs", "../../@sinclair/typebox/build/import/type/exclude/exclude.mjs", "../../@sinclair/typebox/build/import/type/exclude/exclude-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/extract/extract-from-template-literal.mjs", "../../@sinclair/typebox/build/import/type/extract/extract.mjs", "../../@sinclair/typebox/build/import/type/extract/extract-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/instance-type/instance-type.mjs", "../../@sinclair/typebox/build/import/type/integer/integer.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/intrinsic-from-mapped-key.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/intrinsic.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/capitalize.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/lowercase.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/uncapitalize.mjs", "../../@sinclair/typebox/build/import/type/intrinsic/uppercase.mjs", "../../@sinclair/typebox/build/import/type/not/not.mjs", "../../@sinclair/typebox/build/import/type/omit/omit-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/omit/omit.mjs", "../../@sinclair/typebox/build/import/type/omit/omit-from-mapped-key.mjs", "../../@sinclair/typebox/build/import/type/parameters/parameters.mjs", "../../@sinclair/typebox/build/import/type/partial/partial.mjs", "../../@sinclair/typebox/build/import/type/partial/partial-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/pick/pick-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/pick/pick.mjs", "../../@sinclair/typebox/build/import/type/pick/pick-from-mapped-key.mjs", "../../@sinclair/typebox/build/import/type/readonly-optional/readonly-optional.mjs", "../../@sinclair/typebox/build/import/type/record/record.mjs", "../../@sinclair/typebox/build/import/type/recursive/recursive.mjs", "../../@sinclair/typebox/build/import/type/ref/ref.mjs", "../../@sinclair/typebox/build/import/type/regexp/regexp.mjs", "../../@sinclair/typebox/build/import/type/required/required.mjs", "../../@sinclair/typebox/build/import/type/required/required-from-mapped-result.mjs", "../../@sinclair/typebox/build/import/type/rest/rest.mjs", "../../@sinclair/typebox/build/import/type/return-type/return-type.mjs", "../../@sinclair/typebox/build/import/type/strict/strict.mjs", "../../@sinclair/typebox/build/import/type/transform/transform.mjs", "../../@sinclair/typebox/build/import/type/void/void.mjs", "../../@sinclair/typebox/build/import/type/type/json.mjs", "../../@sinclair/typebox/build/import/type/type/type.mjs", "../../@sinclair/typebox/build/import/type/type/javascript.mjs", "../../@sinclair/typebox/build/import/type/type/index.mjs"],
  "sourcesContent": ["/** Increments the given string value + 1 */\nexport function Increment(T) {\n    return (parseInt(T) + 1).toString();\n}\n", "import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsIntersect, IsUnion, IsPromise } from '../guard/type.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => AwaitedResolve(L));\n}\n// prettier-ignore\nfunction FromIntersect(T) {\n    return Intersect(FromRest(T));\n}\n// prettier-ignore\nfunction FromUnion(T) {\n    return Union(FromRest(T));\n}\n// prettier-ignore\nfunction FromPromise(T) {\n    return AwaitedResolve(T);\n}\n// ----------------------------------------------------------------\n// AwaitedResolve\n// ----------------------------------------------------------------\n// prettier-ignore\nfunction AwaitedResolve(T) {\n    return (IsIntersect(T) ? FromIntersect(T.allOf) :\n        IsUnion(T) ? FromUnion(T.anyOf) :\n            IsPromise(T) ? FromPromise(T.item) :\n                T);\n}\n/** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */\nexport function Awaited(T, options = {}) {\n    return CloneType(AwaitedResolve(T), options);\n}\n", "import { IntersectEvaluated } from '../intersect/index.mjs';\nimport { IndexFromPropertyKeys } from '../indexed/index.mjs';\nimport { KeyOfPropertyKeys } from '../keyof/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { SetDistinct } from '../sets/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsNever } from '../guard/type.mjs';\n// prettier-ignore\nfunction CompositeKeys(T) {\n    return T.reduce((Acc, L) => {\n        return SetDistinct([...Acc, ...KeyOfPropertyKeys(L)]);\n    }, []);\n}\n// prettier-ignore\nfunction FilterNever(T) {\n    return T.filter(L => !IsNever(L));\n}\n// prettier-ignore\nfunction CompositeProperty(T, K) {\n    return T.reduce((Acc, L) => {\n        return FilterNever([...Acc, ...IndexFromPropertyKeys(L, [K])]);\n    }, []);\n}\n// prettier-ignore\nfunction CompositeProperties(T, K) {\n    return K.reduce((Acc, L) => {\n        return { ...Acc, [L]: IntersectEvaluated(CompositeProperty(T, L)) };\n    }, {});\n}\n// prettier-ignore\nexport function Composite(T, options = {}) {\n    const K = CompositeKeys(T);\n    const P = CompositeProperties(T, K);\n    const R = Object(P, options);\n    return R;\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a Date type */\nexport function Date(options = {}) {\n    return {\n        ...options,\n        [Kind]: 'Date',\n        type: 'Date',\n    };\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[Json]` Creates a Null type */\nexport function Null(options = {}) {\n    return {\n        ...options,\n        [Kind]: 'Null',\n        type: 'null',\n    };\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a Symbol type */\nexport function Symbol(options) {\n    return { ...options, [Kind]: 'Symbol', type: 'symbol' };\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a Undefined type */\nexport function Undefined(options = {}) {\n    return { ...options, [Kind]: 'Undefined', type: 'undefined' };\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a Uint8Array type */\nexport function Uint8Array(options = {}) {\n    return { ...options, [Kind]: 'Uint8Array', type: 'Uint8Array' };\n}\n", "import { Any } from '../any/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Date } from '../date/index.mjs';\nimport { Function as FunctionType } from '../function/index.mjs';\nimport { Literal } from '../literal/index.mjs';\nimport { Null } from '../null/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Symbol } from '../symbol/index.mjs';\nimport { Tuple } from '../tuple/index.mjs';\nimport { Readonly } from '../readonly/index.mjs';\nimport { Undefined } from '../undefined/index.mjs';\nimport { Uint8Array } from '../uint8array/index.mjs';\nimport { Unknown } from '../unknown/index.mjs';\nimport { CloneType } from '../clone/index.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsArray, IsNumber, IsBigInt, IsUint8Array, IsDate, IsIterator, IsObject, IsAsyncIterator, IsFunction, IsUndefined, IsNull, IsSymbol, IsBoolean, IsString } from '../guard/value.mjs';\n// prettier-ignore\nfunction FromArray(T) {\n    return T.map(L => FromValue(L, false));\n}\n// prettier-ignore\nfunction FromProperties(value) {\n    return globalThis.Object.getOwnPropertyNames(value).reduce((acc, key) => {\n        return { ...acc, [key]: Readonly(FromValue(value[key], false)) };\n    }, {});\n}\nfunction ConditionalReadonly(T, root) {\n    return (root === true ? T : Readonly(T));\n}\n// prettier-ignore\nfunction FromValue(value, root) {\n    return (IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) :\n        IsIterator(value) ? ConditionalReadonly(Any(), root) :\n            IsArray(value) ? Readonly(Tuple(FromArray(value))) :\n                IsUint8Array(value) ? Uint8Array() :\n                    IsDate(value) ? Date() :\n                        IsObject(value) ? ConditionalReadonly(Object(FromProperties(value)), root) :\n                            IsFunction(value) ? ConditionalReadonly(FunctionType([], Unknown()), root) :\n                                IsUndefined(value) ? Undefined() :\n                                    IsNull(value) ? Null() :\n                                        IsSymbol(value) ? Symbol() :\n                                            IsBigInt(value) ? BigInt() :\n                                                IsNumber(value) ? Literal(value) :\n                                                    IsBoolean(value) ? Literal(value) :\n                                                        IsString(value) ? Literal(value) :\n                                                            Object({}));\n}\n/** `[JavaScript]` Creates a readonly const type from the given value. */\nexport function Const(T, options = {}) {\n    return CloneType(FromValue(T, true), options);\n}\n", "import { Tuple } from '../tuple/index.mjs';\nimport { CloneRest } from '../clone/type.mjs';\n/** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */\nexport function ConstructorParameters(schema, options = {}) {\n    return Tuple(CloneRest(schema.parameters), { ...options });\n}\n", "import { CloneType, CloneRest } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { IsUndefined } from '../guard/value.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsConstructor, IsFunction, IsIntersect, IsUnion, IsTuple, IsArray, IsObject, IsPromise, IsAsyncIterator, IsIterator, IsRef } from '../guard/type.mjs';\nfunction FromRest(schema, references) {\n    return schema.map((schema) => Deref(schema, references));\n}\n// prettier-ignore\nfunction FromProperties(properties, references) {\n    return globalThis.Object.getOwnPropertyNames(properties).reduce((acc, key) => {\n        return { ...acc, [key]: Deref(properties[key], references) };\n    }, {});\n}\n// prettier-ignore\nfunction FromConstructor(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromFunction(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIntersect(schema, references) {\n    schema.allOf = FromRest(schema.allOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromUnion(schema, references) {\n    schema.anyOf = FromRest(schema.anyOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromTuple(schema, references) {\n    if (IsUndefined(schema.items))\n        return schema;\n    schema.items = FromRest(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromArray(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromObject(schema, references) {\n    schema.properties = FromProperties(schema.properties, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromPromise(schema, references) {\n    schema.item = Deref(schema.item, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromAsyncIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromRef(schema, references) {\n    const target = references.find(remote => remote.$id === schema.$ref);\n    if (target === undefined)\n        throw Error(`Unable to dereference schema with $id ${schema.$ref}`);\n    const discard = Discard(target, ['$id']);\n    return Deref(discard, references);\n}\n// prettier-ignore\nfunction DerefResolve(schema, references) {\n    return (IsConstructor(schema) ? FromConstructor(schema, references) :\n        IsFunction(schema) ? FromFunction(schema, references) :\n            IsIntersect(schema) ? FromIntersect(schema, references) :\n                IsUnion(schema) ? FromUnion(schema, references) :\n                    IsTuple(schema) ? FromTuple(schema, references) :\n                        IsArray(schema) ? FromArray(schema, references) :\n                            IsObject(schema) ? FromObject(schema, references) :\n                                IsPromise(schema) ? FromPromise(schema, references) :\n                                    IsAsyncIterator(schema) ? FromAsyncIterator(schema, references) :\n                                        IsIterator(schema) ? FromIterator(schema, references) :\n                                            IsRef(schema) ? FromRef(schema, references) :\n                                                schema);\n}\n// ------------------------------------------------------------------\n// TDeref\n// ------------------------------------------------------------------\n/** `[Json]` Creates a dereferenced type */\nexport function Deref(schema, references) {\n    return DerefResolve(CloneType(schema), CloneRest(references));\n}\n", "import { Literal } from '../literal/index.mjs';\nimport { Kind, Hint } from '../symbols/index.mjs';\nimport { Union } from '../union/index.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsUndefined } from '../guard/value.mjs';\n/** `[Json]` Creates a Enum type */\nexport function Enum(item, options = {}) {\n    if (IsUndefined(item))\n        throw new Error('Enum undefined or empty');\n    const values1 = globalThis.Object.getOwnPropertyNames(item)\n        .filter((key) => isNaN(key))\n        .map((key) => item[key]);\n    const values2 = [...new Set(values1)];\n    const anyOf = values2.map((value) => Literal(value));\n    return Union(anyOf, { ...options, [Hint]: 'Enum' });\n}\n", "import { Exclude } from './exclude.mjs';\nimport { TemplateLiteralToUnion } from '../template-literal/index.mjs';\nexport function ExcludeFromTemplateLiteral(L, R) {\n    return Exclude(TemplateLiteralToUnion(L), R);\n}\n", "import { Union } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from '../extends/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExcludeFromMappedResult } from './exclude-from-mapped-result.mjs';\nimport { ExcludeFromTemplateLiteral } from './exclude-from-template-literal.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsTemplateLiteral, IsUnion } from '../guard/type.mjs';\nfunction ExcludeRest(L, R) {\n    const excluded = L.filter((inner) => ExtendsCheck(inner, R) === ExtendsResult.False);\n    return excluded.length === 1 ? excluded[0] : Union(excluded);\n}\n/** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */\nexport function Exclude(L, R, options = {}) {\n    // overloads\n    if (IsTemplateLiteral(L))\n        return CloneType(ExcludeFromTemplateLiteral(L, R), options);\n    if (IsMappedResult(L))\n        return CloneType(ExcludeFromMappedResult(L, R), options);\n    // prettier-ignore\n    return CloneType(IsUnion(L) ? ExcludeRest(L.anyOf, R) :\n        ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Exclude } from './exclude.mjs';\n// prettier-ignore\nfunction FromProperties(P, U) {\n    return globalThis.Object.getOwnPropertyNames(P).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Exclude(P[K2], U) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, T) {\n    return FromProperties(R.properties, T);\n}\n// prettier-ignore\nexport function ExcludeFromMappedResult(R, T) {\n    const P = FromMappedResult(R, T);\n    return MappedResult(P);\n}\n", "import { Extract } from './extract.mjs';\nimport { TemplateLiteralToUnion } from '../template-literal/index.mjs';\nexport function ExtractFromTemplateLiteral(L, R) {\n    return Extract(TemplateLiteralToUnion(L), R);\n}\n", "import { Union } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from '../extends/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExtractFromMappedResult } from './extract-from-mapped-result.mjs';\nimport { ExtractFromTemplateLiteral } from './extract-from-template-literal.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsTemplateLiteral, IsUnion } from '../guard/type.mjs';\nfunction ExtractRest(L, R) {\n    const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);\n    return extracted.length === 1 ? extracted[0] : Union(extracted);\n}\n/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\nexport function Extract(L, R, options = {}) {\n    // overloads\n    if (IsTemplateLiteral(L))\n        return CloneType(ExtractFromTemplateLiteral(L, R), options);\n    if (IsMappedResult(L))\n        return CloneType(ExtractFromMappedResult(L, R), options);\n    // prettier-ignore\n    return CloneType(IsUnion(L) ? ExtractRest(L.anyOf, R) :\n        ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Extract } from './extract.mjs';\n// prettier-ignore\nfunction FromProperties(P, T) {\n    return globalThis.Object.getOwnPropertyNames(P).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Extract(P[K2], T) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, T) {\n    return FromProperties(R.properties, T);\n}\n// prettier-ignore\nexport function ExtractFromMappedResult(R, T) {\n    const P = FromMappedResult(R, T);\n    return MappedResult(P);\n}\n", "import { CloneType } from '../clone/type.mjs';\n/** `[JavaScript]` Extracts the InstanceType from the given Constructor type */\nexport function InstanceType(schema, options = {}) {\n    return CloneType(schema.returns, options);\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[Json]` Creates an Integer type */\nexport function Integer(options = {}) {\n    return {\n        ...options,\n        [Kind]: 'Integer',\n        type: 'integer',\n    };\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Intrinsic } from './intrinsic.mjs';\nimport { Literal } from '../literal/index.mjs';\n// prettier-ignore\nfunction MappedIntrinsicPropertyKey(K, M, options) {\n    return {\n        [K]: Intrinsic(Literal(K), M, options)\n    };\n}\n// prettier-ignore\nfunction MappedIntrinsicPropertyKeys(K, M, options) {\n    return K.reduce((Acc, L) => {\n        return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };\n    }, {});\n}\n// prettier-ignore\nfunction MappedIntrinsicProperties(T, M, options) {\n    return MappedIntrinsicPropertyKeys(T['keys'], M, options);\n}\n// prettier-ignore\nexport function IntrinsicFromMappedKey(T, M, options) {\n    const P = MappedIntrinsicProperties(T, M, options);\n    return MappedResult(P);\n}\n", "import { TemplateLiteral, TemplateLiteralParseExact, IsTemplateLiteralExpressionFinite, TemplateLiteralExpressionGenerate } from '../template-literal/index.mjs';\nimport { IntrinsicFromMappedKey } from './intrinsic-from-mapped-key.mjs';\nimport { Literal } from '../literal/index.mjs';\nimport { Union } from '../union/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedKey, IsTemplateLiteral, IsUnion, IsLiteral } from '../guard/type.mjs';\n// ------------------------------------------------------------------\n// Apply\n// ------------------------------------------------------------------\nfunction ApplyUncapitalize(value) {\n    const [first, rest] = [value.slice(0, 1), value.slice(1)];\n    return [first.toLowerCase(), rest].join('');\n}\nfunction ApplyCapitalize(value) {\n    const [first, rest] = [value.slice(0, 1), value.slice(1)];\n    return [first.toUpperCase(), rest].join('');\n}\nfunction ApplyUppercase(value) {\n    return value.toUpperCase();\n}\nfunction ApplyLowercase(value) {\n    return value.toLowerCase();\n}\nfunction FromTemplateLiteral(schema, mode, options) {\n    // note: template literals require special runtime handling as they are encoded in string patterns.\n    // This diverges from the mapped type which would otherwise map on the template literal kind.\n    const expression = TemplateLiteralParseExact(schema.pattern);\n    const finite = IsTemplateLiteralExpressionFinite(expression);\n    if (!finite)\n        return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };\n    const strings = [...TemplateLiteralExpressionGenerate(expression)];\n    const literals = strings.map((value) => Literal(value));\n    const mapped = FromRest(literals, mode);\n    const union = Union(mapped);\n    return TemplateLiteral([union], options);\n}\n// prettier-ignore\nfunction FromLiteralValue(value, mode) {\n    return (typeof value === 'string' ? (mode === 'Uncapitalize' ? ApplyUncapitalize(value) :\n        mode === 'Capitalize' ? ApplyCapitalize(value) :\n            mode === 'Uppercase' ? ApplyUppercase(value) :\n                mode === 'Lowercase' ? ApplyLowercase(value) :\n                    value) : value.toString());\n}\n// prettier-ignore\nfunction FromRest(T, M) {\n    return T.map(L => Intrinsic(L, M));\n}\n/** Applies an intrinsic string manipulation to the given type. */\nexport function Intrinsic(schema, mode, options = {}) {\n    // prettier-ignore\n    return (\n    // Intrinsic-Mapped-Inference\n    IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) :\n        // Standard-Inference\n        IsTemplateLiteral(schema) ? FromTemplateLiteral(schema, mode, schema) :\n            IsUnion(schema) ? Union(FromRest(schema.anyOf, mode), options) :\n                IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) :\n                    schema);\n}\n", "import { Intrinsic } from './intrinsic.mjs';\n/** `[Json]` Intrinsic function to Capitalize LiteralString types */\nexport function Capitalize(T, options = {}) {\n    return Intrinsic(T, 'Capitalize', options);\n}\n", "import { Intrinsic } from './intrinsic.mjs';\n/** `[Json]` Intrinsic function to Lowercase LiteralString types */\nexport function Lowercase(T, options = {}) {\n    return Intrinsic(T, 'Lowercase', options);\n}\n", "import { Intrinsic } from './intrinsic.mjs';\n/** `[Json]` Intrinsic function to Uncapitalize LiteralString types */\nexport function Uncapitalize(T, options = {}) {\n    return Intrinsic(T, 'Uncapitalize', options);\n}\n", "import { Intrinsic } from './intrinsic.mjs';\n/** `[Json]` Intrinsic function to Uppercase LiteralString types */\nexport function Uppercase(T, options = {}) {\n    return Intrinsic(T, 'Uppercase', options);\n}\n", "import { CloneType } from '../clone/type.mjs';\nimport { Kind } from '../symbols/index.mjs';\n/** `[Json]` Creates a Not type */\nexport function Not(schema, options) {\n    return {\n        ...options,\n        [Kind]: 'Not',\n        not: CloneType(schema),\n    };\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Omit } from './omit.mjs';\n// prettier-ignore\nfunction FromProperties(P, K, options) {\n    return globalThis.Object.getOwnPropertyNames(P).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Omit(P[K2], K, options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, K, options) {\n    return FromProperties(R.properties, K, options);\n}\n// prettier-ignore\nexport function OmitFromMappedResult(R, K, options) {\n    const P = FromMappedResult(R, K, options);\n    return MappedResult(P);\n}\n", "import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { IndexPropertyKeys } from '../indexed/index.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { OmitFromMappedKey } from './omit-from-mapped-key.mjs';\nimport { OmitFromMappedResult } from './omit-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedKey, IsIntersect, IsUnion, IsObject, IsSchema, IsMappedResult } from '../guard/type.mjs';\n// prettier-ignore\nfunction FromIntersect(T, K) {\n    return T.map((T) => OmitResolve(T, K));\n}\n// prettier-ignore\nfunction FromUnion(T, K) {\n    return T.map((T) => OmitResolve(T, K));\n}\n// ------------------------------------------------------------------\n// FromProperty\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction FromProperty(T, K) {\n    const { [K]: _, ...R } = T;\n    return R;\n}\n// prettier-ignore\nfunction FromProperties(T, K) {\n    return K.reduce((T, K2) => {\n        return FromProperty(T, K2);\n    }, T);\n}\n// ------------------------------------------------------------------\n// OmitResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction OmitResolve(T, K) {\n    return (IsIntersect(T) ? Intersect(FromIntersect(T.allOf, K)) :\n        IsUnion(T) ? Union(FromUnion(T.anyOf, K)) :\n            IsObject(T) ? Object(FromProperties(T.properties, K)) :\n                Object({}));\n}\nexport function Omit(T, K, options = {}) {\n    // mapped\n    if (IsMappedKey(K))\n        return OmitFromMappedKey(T, K, options);\n    if (IsMappedResult(T))\n        return OmitFromMappedResult(T, K, options);\n    // non-mapped\n    const I = IsSchema(K) ? IndexPropertyKeys(K) : K;\n    const D = Discard(T, [TransformKind, '$id', 'required']);\n    const R = CloneType(OmitResolve(T, I), options);\n    return { ...D, ...R };\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Omit } from './omit.mjs';\n// prettier-ignore\nfunction FromPropertyKey(T, K, options) {\n    return {\n        [K]: Omit(T, [K], options)\n    };\n}\n// prettier-ignore\nfunction FromPropertyKeys(T, K, options) {\n    return K.reduce((Acc, LK) => {\n        return { ...Acc, ...FromPropertyKey(T, LK, options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedKey(T, K, options) {\n    return FromPropertyKeys(T, K.keys, options);\n}\n// prettier-ignore\nexport function OmitFromMappedKey(T, K, options) {\n    const P = FromMappedKey(T, K, options);\n    return MappedResult(P);\n}\n", "import { Tuple } from '../tuple/index.mjs';\nimport { CloneRest } from '../clone/type.mjs';\n/** `[JavaScript]` Extracts the Parameters from the given Function type */\nexport function Parameters(schema, options = {}) {\n    return Tuple(CloneRest(schema.parameters), { ...options });\n}\n", "import { Optional } from '../optional/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { PartialFromMappedResult } from './partial-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/type.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => PartialResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n    return globalThis.Object.getOwnPropertyNames(T).reduce((Acc, K) => {\n        return { ...Acc, [K]: Optional(T[K]) };\n    }, {});\n}\n// ------------------------------------------------------------------\n// PartialResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction PartialResolve(T) {\n    return (IsIntersect(T) ? Intersect(FromRest(T.allOf)) :\n        IsUnion(T) ? Union(FromRest(T.anyOf)) :\n            IsObject(T) ? Object(FromProperties(T.properties)) :\n                Object({}));\n}\n/** `[Json]` Constructs a type where all properties are optional */\nexport function Partial(T, options = {}) {\n    if (IsMappedResult(T))\n        return PartialFromMappedResult(T, options);\n    const D = Discard(T, [TransformKind, '$id', 'required']);\n    const R = CloneType(PartialResolve(T), options);\n    return { ...D, ...R };\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Partial } from './partial.mjs';\n// prettier-ignore\nfunction FromProperties(K, options) {\n    return globalThis.Object.getOwnPropertyNames(K).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Partial(K[K2], options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, options) {\n    return FromProperties(R.properties, options);\n}\n// prettier-ignore\nexport function PartialFromMappedResult(R, options) {\n    const P = FromMappedResult(R, options);\n    return MappedResult(P);\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Pick } from './pick.mjs';\n// prettier-ignore\nfunction FromProperties(P, K, options) {\n    return globalThis.Object.getOwnPropertyNames(P).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Pick(P[K2], K, options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, K, options) {\n    return FromProperties(R.properties, K, options);\n}\n// prettier-ignore\nexport function PickFromMappedResult(R, K, options) {\n    const P = FromMappedResult(R, K, options);\n    return MappedResult(P);\n}\n", "import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { IndexPropertyKeys } from '../indexed/index.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { PickFromMappedKey } from './pick-from-mapped-key.mjs';\nimport { PickFromMappedResult } from './pick-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedKey, IsMappedResult, IsIntersect, IsUnion, IsObject, IsSchema } from '../guard/type.mjs';\nfunction FromIntersect(T, K) {\n    return T.map((T) => PickResolve(T, K));\n}\n// prettier-ignore\nfunction FromUnion(T, K) {\n    return T.map((T) => PickResolve(T, K));\n}\n// prettier-ignore\nfunction FromProperties(T, K) {\n    return K.reduce((Acc, K) => {\n        return K in T ? { ...Acc, [K]: T[K] } : Acc;\n    }, {});\n}\n// ------------------------------------------------------------------\n// PickResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction PickResolve(T, K) {\n    return (IsIntersect(T) ? Intersect(FromIntersect(T.allOf, K)) :\n        IsUnion(T) ? Union(FromUnion(T.anyOf, K)) :\n            IsObject(T) ? Object(FromProperties(T.properties, K)) :\n                Object({}));\n}\nexport function Pick(T, K, options = {}) {\n    // mapped\n    if (IsMappedKey(K))\n        return PickFromMappedKey(T, K, options);\n    if (IsMappedResult(T))\n        return PickFromMappedResult(T, K, options);\n    // non-mapped\n    const I = IsSchema(K) ? IndexPropertyKeys(K) : K;\n    const D = Discard(T, [TransformKind, '$id', 'required']);\n    const R = CloneType(PickResolve(T, I), options);\n    return { ...D, ...R };\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Pick } from './pick.mjs';\n// prettier-ignore\nfunction FromPropertyKey(T, K, options) {\n    return {\n        [K]: Pick(T, [K], options)\n    };\n}\n// prettier-ignore\nfunction FromPropertyKeys(T, K, options) {\n    return K.reduce((Acc, LK) => {\n        return { ...Acc, ...FromPropertyKey(T, LK, options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedKey(T, K, options) {\n    return FromPropertyKeys(T, K.keys, options);\n}\n// prettier-ignore\nexport function PickFromMappedKey(T, K, options) {\n    const P = FromMappedKey(T, K, options);\n    return MappedResult(P);\n}\n", "import { Readonly } from '../readonly/index.mjs';\nimport { Optional } from '../optional/index.mjs';\n/** `[Json]` Creates a Readonly and Optional property */\nexport function ReadonlyOptional(schema) {\n    return Readonly(Optional(schema));\n}\n", "import { Object } from '../object/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { IsTemplateLiteralFinite } from '../template-literal/index.mjs';\nimport { PatternStringExact, PatternNumberExact } from '../patterns/index.mjs';\nimport { IndexPropertyKeys } from '../indexed/index.mjs';\nimport { Kind, Hint } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsUndefined } from '../guard/value.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsInteger, IsLiteral, IsNumber, IsString, IsRegExp, IsTemplateLiteral, IsUnion } from '../guard/type.mjs';\n// ------------------------------------------------------------------\n// RecordCreateFromPattern\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RecordCreateFromPattern(pattern, T, options) {\n    return {\n        ...options,\n        [Kind]: 'Record',\n        type: 'object',\n        patternProperties: { [pattern]: CloneType(T) }\n    };\n}\n// ------------------------------------------------------------------\n// RecordCreateFromKeys\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RecordCreateFromKeys(K, T, options) {\n    const P = K.reduce((Acc, K) => ({ ...Acc, [K]: CloneType(T) }), {});\n    return Object(P, { ...options, [Hint]: 'Record' });\n}\n// prettier-ignore\nfunction FromTemplateLiteralKey(K, T, options) {\n    return (IsTemplateLiteralFinite(K)\n        ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options)\n        : RecordCreateFromPattern(K.pattern, T, options));\n}\n// prettier-ignore\nfunction FromUnionKey(K, T, options) {\n    return RecordCreateFromKeys(IndexPropertyKeys(Union(K)), T, options);\n}\n// prettier-ignore\nfunction FromLiteralKey(K, T, options) {\n    return RecordCreateFromKeys([K.toString()], T, options);\n}\n// prettier-ignore\nfunction FromRegExpKey(K, T, options) {\n    return RecordCreateFromPattern(K.source, T, options);\n}\n// prettier-ignore\nfunction FromStringKey(K, T, options) {\n    const pattern = IsUndefined(K.pattern) ? PatternStringExact : K.pattern;\n    return RecordCreateFromPattern(pattern, T, options);\n}\n// prettier-ignore\nfunction FromIntegerKey(_, T, options) {\n    return RecordCreateFromPattern(PatternNumberExact, T, options);\n}\n// prettier-ignore\nfunction FromNumberKey(_, T, options) {\n    return RecordCreateFromPattern(PatternNumberExact, T, options);\n}\n// ------------------------------------------------------------------\n// TRecordOrObject\n// ------------------------------------------------------------------\n/** `[Json]` Creates a Record type */\nexport function Record(K, T, options = {}) {\n    // prettier-ignore\n    return (IsUnion(K) ? FromUnionKey(K.anyOf, T, options) :\n        IsTemplateLiteral(K) ? FromTemplateLiteralKey(K, T, options) :\n            IsLiteral(K) ? FromLiteralKey(K.const, T, options) :\n                IsInteger(K) ? FromIntegerKey(K, T, options) :\n                    IsNumber(K) ? FromNumberKey(K, T, options) :\n                        IsRegExp(K) ? FromRegExpKey(K, T, options) :\n                            IsString(K) ? FromStringKey(K, T, options) :\n                                Never(options));\n}\n", "import { CloneType } from '../clone/type.mjs';\nimport { IsUndefined } from '../guard/value.mjs';\nimport { Kind, Hint } from '../symbols/index.mjs';\n// Auto Tracked For Recursive Types without ID's\nlet Ordinal = 0;\n/** `[Json]` Creates a Recursive type */\nexport function Recursive(callback, options = {}) {\n    if (IsUndefined(options.$id))\n        options.$id = `T${Ordinal++}`;\n    const thisType = callback({ [Kind]: 'This', $ref: `${options.$id}` });\n    thisType.$id = options.$id;\n    // prettier-ignore\n    return CloneType({ ...options, [Hint]: 'Recursive', ...thisType });\n}\n", "import { Kind } from '../symbols/index.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsString, IsUndefined } from '../guard/value.mjs';\n/** `[Json]` Creates a Ref type. */\nexport function Ref(unresolved, options = {}) {\n    if (IsString(unresolved))\n        return { ...options, [Kind]: 'Ref', $ref: unresolved };\n    if (IsUndefined(unresolved.$id))\n        throw new Error('Reference target type must specify an $id');\n    return {\n        ...options,\n        [Kind]: 'Ref',\n        $ref: unresolved.$id,\n    };\n}\n", "import { IsString } from '../guard/value.mjs';\nimport { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a RegExp type */\nexport function RegExp(unresolved, options = {}) {\n    const expr = IsString(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;\n    return { ...options, [Kind]: 'RegExp', type: 'RegExp', source: expr.source, flags: expr.flags };\n}\n", "import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { OptionalKind, TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { RequiredFromMappedResult } from './required-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/type.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => RequiredResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n    return globalThis.Object.getOwnPropertyNames(T).reduce((Acc, K) => {\n        return { ...Acc, [K]: Discard(T[K], [OptionalKind]) };\n    }, {});\n}\n// ------------------------------------------------------------------\n// RequiredResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RequiredResolve(T) {\n    return (IsIntersect(T) ? Intersect(FromRest(T.allOf)) :\n        IsUnion(T) ? Union(FromRest(T.anyOf)) :\n            IsObject(T) ? Object(FromProperties(T.properties)) :\n                Object({}));\n}\n/** `[Json]` Constructs a type where all properties are required */\nexport function Required(T, options = {}) {\n    if (IsMappedResult(T)) {\n        return RequiredFromMappedResult(T, options);\n    }\n    else {\n        const D = Discard(T, [TransformKind, '$id', 'required']);\n        const R = CloneType(RequiredResolve(T), options);\n        return { ...D, ...R };\n    }\n}\n", "import { MappedResult } from '../mapped/index.mjs';\nimport { Required } from './required.mjs';\n// prettier-ignore\nfunction FromProperties(P, options) {\n    return globalThis.Object.getOwnPropertyNames(P).reduce((Acc, K2) => {\n        return { ...Acc, [K2]: Required(P[K2], options) };\n    }, {});\n}\n// prettier-ignore\nfunction FromMappedResult(R, options) {\n    return FromProperties(R.properties, options);\n}\n// prettier-ignore\nexport function RequiredFromMappedResult(R, options) {\n    const P = FromMappedResult(R, options);\n    return MappedResult(P);\n}\n", "import { CloneRest } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsIntersect, IsUnion, IsTuple } from '../guard/type.mjs';\n// prettier-ignore\nfunction RestResolve(T) {\n    return (IsIntersect(T) ? [...T.allOf] :\n        IsUnion(T) ? [...T.anyOf] :\n            IsTuple(T) ? [...(T.items ?? [])] :\n                []);\n}\n/** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */\nexport function Rest(T) {\n    return CloneRest(RestResolve(T));\n}\n", "import { CloneType } from '../clone/type.mjs';\n/** `[JavaScript]` Extracts the ReturnType from the given Function type */\nexport function ReturnType(schema, options = {}) {\n    return CloneType(schema.returns, options);\n}\n", "/** `[Json]` Omits compositing symbols from this schema. */\nexport function Strict(schema) {\n    return JSON.parse(JSON.stringify(schema));\n}\n", "import { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsTransform } from '../guard/type.mjs';\n// ------------------------------------------------------------------\n// TransformBuilders\n// ------------------------------------------------------------------\nexport class TransformDecodeBuilder {\n    schema;\n    constructor(schema) {\n        this.schema = schema;\n    }\n    Decode(decode) {\n        return new TransformEncodeBuilder(this.schema, decode);\n    }\n}\n// prettier-ignore\nexport class TransformEncodeBuilder {\n    schema;\n    decode;\n    constructor(schema, decode) {\n        this.schema = schema;\n        this.decode = decode;\n    }\n    EncodeTransform(encode, schema) {\n        const Encode = (value) => schema[TransformKind].Encode(encode(value));\n        const Decode = (value) => this.decode(schema[TransformKind].Decode(value));\n        const Codec = { Encode: Encode, Decode: Decode };\n        return { ...schema, [TransformKind]: Codec };\n    }\n    EncodeSchema(encode, schema) {\n        const Codec = { Decode: this.decode, Encode: encode };\n        return { ...schema, [TransformKind]: Codec };\n    }\n    Encode(encode) {\n        const schema = CloneType(this.schema);\n        return (IsTransform(schema) ? this.EncodeTransform(encode, schema) : this.EncodeSchema(encode, schema));\n    }\n}\n/** `[Json]` Creates a Transform type */\nexport function Transform(schema) {\n    return new TransformDecodeBuilder(schema);\n}\n", "import { Kind } from '../symbols/index.mjs';\n/** `[JavaScript]` Creates a Void type */\nexport function Void(options = {}) {\n    return {\n        ...options,\n        [Kind]: 'Void',\n        type: 'void',\n    };\n}\n", "import { Any } from '../any/index.mjs';\nimport { Array } from '../array/index.mjs';\nimport { Boolean } from '../boolean/index.mjs';\nimport { Composite } from '../composite/index.mjs';\nimport { Const } from '../const/index.mjs';\nimport { Deref } from '../deref/index.mjs';\nimport { Enum } from '../enum/index.mjs';\nimport { Exclude } from '../exclude/index.mjs';\nimport { Extends } from '../extends/index.mjs';\nimport { Extract } from '../extract/index.mjs';\nimport { Index } from '../indexed/index.mjs';\nimport { Integer } from '../integer/index.mjs';\nimport { Intersect } from '../intersect/index.mjs';\nimport { Capitalize, Uncapitalize, Lowercase, Uppercase } from '../intrinsic/index.mjs';\nimport { KeyOf } from '../keyof/index.mjs';\nimport { Literal } from '../literal/index.mjs';\nimport { Mapped } from '../mapped/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { Not } from '../not/index.mjs';\nimport { Null } from '../null/index.mjs';\nimport { Number } from '../number/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Omit } from '../omit/index.mjs';\nimport { Optional } from '../optional/index.mjs';\nimport { Partial } from '../partial/index.mjs';\nimport { Pick } from '../pick/index.mjs';\nimport { Readonly } from '../readonly/index.mjs';\nimport { ReadonlyOptional } from '../readonly-optional/index.mjs';\nimport { Record } from '../record/index.mjs';\nimport { Recursive } from '../recursive/index.mjs';\nimport { Ref } from '../ref/index.mjs';\nimport { Required } from '../required/index.mjs';\nimport { Rest } from '../rest/index.mjs';\nimport { Strict } from '../strict/index.mjs';\nimport { String } from '../string/index.mjs';\nimport { TemplateLiteral } from '../template-literal/index.mjs';\nimport { Transform } from '../transform/index.mjs';\nimport { Tuple } from '../tuple/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Unknown } from '../unknown/index.mjs';\nimport { Unsafe } from '../unsafe/index.mjs';\n/** Json Type Builder with Static Resolution for TypeScript */\nexport class JsonTypeBuilder {\n    // ------------------------------------------------------------------------\n    // Strict\n    // ------------------------------------------------------------------------\n    /** `[Json]` Omits compositing symbols from this schema */\n    Strict(schema) {\n        return Strict(schema);\n    }\n    // ------------------------------------------------------------------------\n    // Modifiers\n    // ------------------------------------------------------------------------\n    /** `[Json]` Creates a Readonly and Optional property */\n    ReadonlyOptional(schema) {\n        return ReadonlyOptional(schema);\n    }\n    /** `[Json]` Creates a Readonly property */\n    Readonly(schema, enable) {\n        return Readonly(schema, enable ?? true);\n    }\n    /** `[Json]` Creates a Optional property */\n    Optional(schema, enable) {\n        return Optional(schema, enable ?? true);\n    }\n    // ------------------------------------------------------------------------\n    // Types\n    // ------------------------------------------------------------------------\n    /** `[Json]` Creates an Any type */\n    Any(options = {}) {\n        return Any(options);\n    }\n    /** `[Json]` Creates an Array type */\n    Array(schema, options = {}) {\n        return Array(schema, options);\n    }\n    /** `[Json]` Creates a Boolean type */\n    Boolean(options = {}) {\n        return Boolean(options);\n    }\n    /** `[Json]` Intrinsic function to Capitalize LiteralString types */\n    Capitalize(schema, options = {}) {\n        return Capitalize(schema, options);\n    }\n    /** `[Json]` Creates a Composite object type */\n    Composite(schemas, options) {\n        return Composite(schemas, options); // (error) TS 5.4.0-dev - review TComposite implementation\n    }\n    /** `[JavaScript]` Creates a readonly const type from the given value. */\n    Const(value, options = {}) {\n        return Const(value, options);\n    }\n    /** `[Json]` Creates a dereferenced type */\n    Deref(schema, references) {\n        return Deref(schema, references);\n    }\n    /** `[Json]` Creates a Enum type */\n    Enum(item, options = {}) {\n        return Enum(item, options);\n    }\n    /** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */\n    Exclude(unionType, excludedMembers, options = {}) {\n        return Exclude(unionType, excludedMembers, options);\n    }\n    /** `[Json]` Creates a Conditional type */\n    Extends(L, R, T, F, options = {}) {\n        return Extends(L, R, T, F, options);\n    }\n    /** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\n    Extract(type, union, options = {}) {\n        return Extract(type, union, options);\n    }\n    /** `[Json]` Returns an Indexed property type for the given keys */\n    Index(schema, unresolved, options = {}) {\n        return Index(schema, unresolved, options);\n    }\n    /** `[Json]` Creates an Integer type */\n    Integer(options = {}) {\n        return Integer(options);\n    }\n    /** `[Json]` Creates an Intersect type */\n    Intersect(T, options = {}) {\n        return Intersect(T, options);\n    }\n    /** `[Json]` Creates a KeyOf type */\n    KeyOf(schema, options = {}) {\n        return KeyOf(schema, options);\n    }\n    /** `[Json]` Creates a Literal type */\n    Literal(value, options = {}) {\n        return Literal(value, options);\n    }\n    /** `[Json]` Intrinsic function to Lowercase LiteralString types */\n    Lowercase(schema, options = {}) {\n        return Lowercase(schema, options);\n    }\n    /** `[Json]` Creates a Mapped object type */\n    Mapped(key, map, options = {}) {\n        return Mapped(key, map, options);\n    }\n    /** `[Json]` Creates a Never type */\n    Never(options = {}) {\n        return Never(options);\n    }\n    /** `[Json]` Creates a Not type */\n    Not(schema, options) {\n        return Not(schema, options);\n    }\n    /** `[Json]` Creates a Null type */\n    Null(options = {}) {\n        return Null(options);\n    }\n    /** `[Json]` Creates a Number type */\n    Number(options = {}) {\n        return Number(options);\n    }\n    /** `[Json]` Creates an Object type */\n    Object(properties, options = {}) {\n        return Object(properties, options);\n    }\n    /** `[Json]` Constructs a type whose keys are omitted from the given type */\n    Omit(schema, unresolved, options = {}) {\n        return Omit(schema, unresolved, options);\n    }\n    /** `[Json]` Constructs a type where all properties are optional */\n    Partial(schema, options = {}) {\n        return Partial(schema, options);\n    }\n    /** `[Json]` Constructs a type whose keys are picked from the given type */\n    Pick(schema, unresolved, options = {}) {\n        return Pick(schema, unresolved, options);\n    }\n    /** `[Json]` Creates a Record type */\n    Record(key, schema, options = {}) {\n        return Record(key, schema, options);\n    }\n    /** `[Json]` Creates a Recursive type */\n    Recursive(callback, options = {}) {\n        return Recursive(callback, options);\n    }\n    /** `[Json]` Creates a Ref type. */\n    Ref(unresolved, options = {}) {\n        return Ref(unresolved, options);\n    }\n    /** `[Json]` Constructs a type where all properties are required */\n    Required(schema, options = {}) {\n        return Required(schema, options);\n    }\n    /** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */\n    Rest(schema) {\n        return Rest(schema);\n    }\n    /** `[Json]` Creates a String type */\n    String(options = {}) {\n        return String(options);\n    }\n    /** `[Json]` Creates a TemplateLiteral type */\n    TemplateLiteral(unresolved, options = {}) {\n        return TemplateLiteral(unresolved, options);\n    }\n    /** `[Json]` Creates a Transform type */\n    Transform(schema) {\n        return Transform(schema);\n    }\n    /** `[Json]` Creates a Tuple type */\n    Tuple(items, options = {}) {\n        return Tuple(items, options);\n    }\n    /** `[Json]` Intrinsic function to Uncapitalize LiteralString types */\n    Uncapitalize(schema, options = {}) {\n        return Uncapitalize(schema, options);\n    }\n    /** `[Json]` Creates a Union type */\n    Union(schemas, options = {}) {\n        return Union(schemas, options);\n    }\n    /** `[Json]` Creates an Unknown type */\n    Unknown(options = {}) {\n        return Unknown(options);\n    }\n    /** `[Json]` Creates a Unsafe type that will infers as the generic argument T */\n    Unsafe(options = {}) {\n        return Unsafe(options);\n    }\n    /** `[Json]` Intrinsic function to Uppercase LiteralString types */\n    Uppercase(schema, options = {}) {\n        return Uppercase(schema, options);\n    }\n}\n", "// ------------------------------------------------------------------\n// Type: Module\n// ------------------------------------------------------------------\nexport { Any } from '../any/index.mjs';\nexport { Array } from '../array/index.mjs';\nexport { AsyncIterator } from '../async-iterator/index.mjs';\nexport { Awaited } from '../awaited/index.mjs';\nexport { BigInt } from '../bigint/index.mjs';\nexport { Boolean } from '../boolean/index.mjs';\nexport { Composite } from '../composite/index.mjs';\nexport { Const } from '../const/index.mjs';\nexport { Constructor } from '../constructor/index.mjs';\nexport { ConstructorParameters } from '../constructor-parameters/index.mjs';\nexport { Date } from '../date/index.mjs';\nexport { Deref } from '../deref/index.mjs';\nexport { Enum } from '../enum/index.mjs';\nexport { Exclude } from '../exclude/index.mjs';\nexport { Extends } from '../extends/index.mjs';\nexport { Extract } from '../extract/index.mjs';\nexport { Function } from '../function/index.mjs';\nexport { Index } from '../indexed/index.mjs';\nexport { InstanceType } from '../instance-type/index.mjs';\nexport { Integer } from '../integer/index.mjs';\nexport { Intersect } from '../intersect/index.mjs';\nexport { Capitalize, Uncapitalize, Lowercase, Uppercase } from '../intrinsic/index.mjs';\nexport { Iterator } from '../iterator/index.mjs';\nexport { KeyOf } from '../keyof/index.mjs';\nexport { Literal } from '../literal/index.mjs';\nexport { Mapped } from '../mapped/index.mjs';\nexport { Never } from '../never/index.mjs';\nexport { Not } from '../not/index.mjs';\nexport { Null } from '../null/index.mjs';\nexport { Number } from '../number/index.mjs';\nexport { Object } from '../object/index.mjs';\nexport { Omit } from '../omit/index.mjs';\nexport { Optional } from '../optional/index.mjs';\nexport { Parameters } from '../parameters/index.mjs';\nexport { Partial } from '../partial/index.mjs';\nexport { Pick } from '../pick/index.mjs';\nexport { Promise } from '../promise/index.mjs';\nexport { Readonly } from '../readonly/index.mjs';\nexport { ReadonlyOptional } from '../readonly-optional/index.mjs';\nexport { Record } from '../record/index.mjs';\nexport { Recursive } from '../recursive/index.mjs';\nexport { Ref } from '../ref/index.mjs';\nexport { RegExp } from '../regexp/index.mjs';\nexport { Required } from '../required/index.mjs';\nexport { Rest } from '../rest/index.mjs';\nexport { ReturnType } from '../return-type/index.mjs';\nexport { Strict } from '../strict/index.mjs';\nexport { String } from '../string/index.mjs';\nexport { Symbol } from '../symbol/index.mjs';\nexport { TemplateLiteral } from '../template-literal/index.mjs';\nexport { Transform } from '../transform/index.mjs';\nexport { Tuple } from '../tuple/index.mjs';\nexport { Uint8Array } from '../uint8array/index.mjs';\nexport { Undefined } from '../undefined/index.mjs';\nexport { Union } from '../union/index.mjs';\nexport { Unknown } from '../unknown/index.mjs';\nexport { Unsafe } from '../unsafe/index.mjs';\nexport { Void } from '../void/index.mjs';\n", "import { JsonTypeBuilder } from './json.mjs';\nimport { AsyncIterator } from '../async-iterator/index.mjs';\nimport { Awaited } from '../awaited/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Constructor } from '../constructor/index.mjs';\nimport { ConstructorParameters } from '../constructor-parameters/index.mjs';\nimport { Date } from '../date/index.mjs';\nimport { Function as FunctionType } from '../function/index.mjs';\nimport { InstanceType } from '../instance-type/index.mjs';\nimport { Iterator } from '../iterator/index.mjs';\nimport { Parameters } from '../parameters/index.mjs';\nimport { Promise } from '../promise/index.mjs';\nimport { RegExp } from '../regexp/index.mjs';\nimport { ReturnType } from '../return-type/index.mjs';\nimport { Symbol } from '../symbol/index.mjs';\nimport { Uint8Array } from '../uint8array/index.mjs';\nimport { Undefined } from '../undefined/index.mjs';\nimport { Void } from '../void/index.mjs';\n/** JavaScript Type Builder with Static Resolution for TypeScript */\nexport class JavaScriptTypeBuilder extends JsonTypeBuilder {\n    /** `[JavaScript]` Creates a AsyncIterator type */\n    AsyncIterator(items, options = {}) {\n        return AsyncIterator(items, options);\n    }\n    /** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */\n    Awaited(schema, options = {}) {\n        return Awaited(schema, options);\n    }\n    /** `[JavaScript]` Creates a BigInt type */\n    BigInt(options = {}) {\n        return BigInt(options);\n    }\n    /** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */\n    ConstructorParameters(schema, options = {}) {\n        return ConstructorParameters(schema, options);\n    }\n    /** `[JavaScript]` Creates a Constructor type */\n    Constructor(parameters, returns, options) {\n        return Constructor(parameters, returns, options);\n    }\n    /** `[JavaScript]` Creates a Date type */\n    Date(options = {}) {\n        return Date(options);\n    }\n    /** `[JavaScript]` Creates a Function type */\n    Function(parameters, returns, options) {\n        return FunctionType(parameters, returns, options);\n    }\n    /** `[JavaScript]` Extracts the InstanceType from the given Constructor type */\n    InstanceType(schema, options = {}) {\n        return InstanceType(schema, options);\n    }\n    /** `[JavaScript]` Creates an Iterator type */\n    Iterator(items, options = {}) {\n        return Iterator(items, options);\n    }\n    /** `[JavaScript]` Extracts the Parameters from the given Function type */\n    Parameters(schema, options = {}) {\n        return Parameters(schema, options);\n    }\n    /** `[JavaScript]` Creates a Promise type */\n    Promise(item, options = {}) {\n        return Promise(item, options);\n    }\n    /** `[JavaScript]` Creates a RegExp type */\n    RegExp(unresolved, options = {}) {\n        return RegExp(unresolved, options);\n    }\n    /** `[JavaScript]` Extracts the ReturnType from the given Function type */\n    ReturnType(schema, options = {}) {\n        return ReturnType(schema, options);\n    }\n    /** `[JavaScript]` Creates a Symbol type */\n    Symbol(options) {\n        return Symbol(options);\n    }\n    /** `[JavaScript]` Creates a Undefined type */\n    Undefined(options = {}) {\n        return Undefined(options);\n    }\n    /** `[JavaScript]` Creates a Uint8Array type */\n    Uint8Array(options = {}) {\n        return Uint8Array(options);\n    }\n    /** `[JavaScript]` Creates a Void type */\n    Void(options = {}) {\n        return Void(options);\n    }\n}\n", "// ------------------------------------------------------------------\n// JsonTypeBuilder\n// ------------------------------------------------------------------\nexport { JsonTypeBuilder } from './json.mjs';\n// ------------------------------------------------------------------\n// JavaScriptTypeBuilder\n// ------------------------------------------------------------------\nimport * as TypeBuilder from './type.mjs';\nimport { JavaScriptTypeBuilder } from './javascript.mjs';\n/** JavaScript Type Builder with Static Resolution for TypeScript */\nconst Type = TypeBuilder;\nexport { JavaScriptTypeBuilder };\nexport { Type };\n"],
  "mappings": "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",
  "names": ["FromRest", "schema", "FromProperties", "FromIntersect", "FromUnion", "FromArray", "FromPromise", "IsFunction", "IsArray", "IsObject", "IsAsyncIterator", "IsIterator", "FromProperties", "FromProperties", "FromMappedResult", "FromRest", "FromProperties", "FromMappedResult", "FromIntersect", "T", "FromUnion", "FromProperties", "IsObject", "FromRest", "FromProperties", "IsObject", "FromProperties", "FromMappedResult", "FromProperties", "FromMappedResult", "FromIntersect", "T", "FromUnion", "FromProperties", "K", "IsObject", "FromPropertyKey", "FromPropertyKeys", "FromMappedKey", "K", "IsNumber", "IsString", "FromRest", "FromProperties", "IsObject", "FromProperties", "FromMappedResult", "type_exports", "Promise", "Promise", "type_exports"]
}
