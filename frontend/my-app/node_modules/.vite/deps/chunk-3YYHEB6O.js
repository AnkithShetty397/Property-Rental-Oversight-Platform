import {
  parse,
  stringify
} from "./chunk-6RJHDZCZ.js";
import {
  merge
} from "./chunk-5EOG3U2A.js";
import {
  collectionClone
} from "./chunk-ACDCLTWX.js";
import {
  derived,
  readable,
  readonly,
  writable
} from "./chunk-42EXQU3F.js";
import {
  HtmlTagHydration,
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  append_styles,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_element,
  claim_html_tag,
  claim_space,
  claim_svg_element,
  claim_text,
  component_subscribe,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_store_value,
  get_svelte_dataset,
  globals,
  group_outros,
  handle_promise,
  init,
  insert_hydration_dev,
  listen_dev,
  noop,
  onDestroy,
  prevent_default,
  safe_not_equal,
  set_data_dev,
  space,
  subscribe,
  svg_element,
  text,
  tick,
  toggle_class,
  transition_in,
  transition_out,
  update_await_block_branch,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-E5KDLRTM.js";
import {
  __publicField
} from "./chunk-OSJZHPF7.js";

// node_modules/sveltekit-superforms/dist/client/superForm.js
import { navigating, page as page2 } from "$app/stores";

// node_modules/sveltekit-superforms/dist/client/SuperDebug.svelte
import { browser } from "$app/environment";
import { page } from "$app/stores";
var { Error: Error_1 } = globals;
var file = "node_modules\\sveltekit-superforms\\dist\\client\\SuperDebug.svelte";
function add_css(target) {
  append_styles(target, "svelte-ugkavp", ".absolute.svelte-ugkavp.svelte-ugkavp{position:absolute}.top-0.svelte-ugkavp.svelte-ugkavp{top:0}.inset-x-0.svelte-ugkavp.svelte-ugkavp{left:0px;right:0px}.pt-0.svelte-ugkavp.svelte-ugkavp{padding-top:0px}.pt-4.svelte-ugkavp.svelte-ugkavp{padding-top:1em}.hidden.svelte-ugkavp.svelte-ugkavp{height:0;overflow:hidden}.rotated.svelte-ugkavp.svelte-ugkavp{transform:rotate(180deg)}.super-debug.svelte-ugkavp.svelte-ugkavp{--_sd-bg-color:var(--sd-bg-color, var(--sd-vscode-bg-color, rgb(30, 41, 59)));position:relative;background-color:var(--_sd-bg-color);border-radius:0.5rem;overflow:hidden}.super-debug--pre.svelte-ugkavp.svelte-ugkavp{overflow-x:auto}.super-debug--collapse.svelte-ugkavp.svelte-ugkavp{display:block;width:100%;color:rgba(255, 255, 255, 0.25);background-color:rgba(255, 255, 255, 0.15);padding:5px 0;display:flex;justify-content:center;border-color:transparent;margin:0;padding:3px 0}.super-debug--collapse.svelte-ugkavp.svelte-ugkavp:is(:hover){color:rgba(255, 255, 255, 0.35);background-color:rgba(255, 255, 255, 0.25)}.super-debug--status.svelte-ugkavp.svelte-ugkavp{display:flex;padding:1em;padding-bottom:0;justify-content:space-between;font-family:Inconsolata, Monaco, Consolas, 'Lucida Console', 'Courier New', Courier, monospace}.super-debug--label.svelte-ugkavp.svelte-ugkavp{color:var(--sd-label-color, var(--sd-vscode-label-color, white))}.super-debug--promise-loading.svelte-ugkavp.svelte-ugkavp{color:var(--sd-promise-loading-color, var(--sd-vscode-promise-loading-color, #999))}.super-debug--promise-rejected.svelte-ugkavp.svelte-ugkavp{color:var(--sd-promise-rejected-color, var(--sd-vscode-promise-rejected-color, #ff475d))}.super-debug.svelte-ugkavp pre.svelte-ugkavp{color:var(--sd-code-default, var(--sd-vscode-code-default, #999));background-color:var(--_sd-bg-color);font-size:1em;margin-bottom:0;padding:1em 0 1em 1em}.info.svelte-ugkavp.svelte-ugkavp{color:var(--sd-info, var(--sd-vscode-info, rgb(85, 85, 255)))}.success.svelte-ugkavp.svelte-ugkavp{color:var(--sd-success, var(--sd-vscode-success, #2cd212))}.redirect.svelte-ugkavp.svelte-ugkavp{color:var(--sd-redirect, var(--sd-vscode-redirect, #03cae5))}.error.svelte-ugkavp.svelte-ugkavp{color:var(--sd-error, var(--sd-vscode-error, #ff475d))}.super-debug--code .key{color:var(--sd-code-key, var(--sd-vscode-code-key, #eab308))}.super-debug--code .string{color:var(--sd-code-string, var(--sd-vscode-code-string, #6ec687))}.super-debug--code .date{color:var(--sd-code-date, var(--sd-vscode-code-date, #f06962))}.super-debug--code .boolean{color:var(--sd-code-boolean, var(--sd-vscode-code-boolean, #79b8ff))}.super-debug--code .number{color:var(--sd-code-number, var(--sd-vscode-code-number, #af77e9))}.super-debug--code .bigint{color:var(--sd-code-bigint, var(--sd-vscode-code-bigint, #af77e9))}.super-debug--code .null{color:var(--sd-code-null, var(--sd-vscode-code-null, #238afe))}.super-debug--code .nan{color:var(--sd-code-nan, var(--sd-vscode-code-nan, #af77e9))}.super-debug--code .undefined{color:var(--sd-code-undefined, var(--sd-vscode-code-undefined, #238afe))}.super-debug--code .function{color:var(--sd-code-function, var(--sd-vscode-code-function, #f06962))}.super-debug--code .symbol{color:var(--sd-code-symbol, var(--sd-vscode-code-symbol, #4de0c5))}.super-debug--code .error{color:var(--sd-code-error, var(--sd-vscode-code-error, #ff475d))}.super-debug.svelte-ugkavp pre.svelte-ugkavp::-webkit-scrollbar{width:var(--sd-sb-width, var(--sd-vscode-sb-width, 1rem));height:var(--sd-sb-height, var(--sd-vscode-sb-height, 1rem))}.super-debug.svelte-ugkavp pre.svelte-ugkavp::-webkit-scrollbar-track{border-radius:12px;background-color:var(\n			--sd-sb-track-color,\n			var(--sd-vscode-sb-track-color, hsl(0, 0%, 40%, 0.2))\n		)}.super-debug.svelte-ugkavp:is(:focus-within, :hover) pre.svelte-ugkavp::-webkit-scrollbar-track{border-radius:12px;background-color:var(\n			--sd-sb-track-color-focus,\n			var(--sd-vscode-sb-track-color-focus, hsl(0, 0%, 50%, 0.2))\n		)}.super-debug.svelte-ugkavp pre.svelte-ugkavp::-webkit-scrollbar-thumb{border-radius:12px;background-color:var(\n			--sd-sb-thumb-color,\n			var(--sd-vscode-sb-thumb-color, hsl(217, 50%, 50%, 0.5))\n		)}.super-debug.svelte-ugkavp:is(:focus-within, :hover) pre.svelte-ugkavp::-webkit-scrollbar-thumb{border-radius:12px;background-color:var(\n			--sd-sb-thumb-color-focus,\n			var(--sd-vscode-sb-thumb-color-focus, hsl(217, 50%, 50%))\n		)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwZXJEZWJ1Zy5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBNlpDLHFDQUFVLENBQ1QsUUFBUSxDQUFFLFFBQ1gsQ0FFQSxrQ0FBTyxDQUNOLEdBQUcsQ0FBRSxDQUNOLENBRUEsc0NBQVcsQ0FDVixJQUFJLENBQUUsR0FBRyxDQUNULEtBQUssQ0FBRSxHQUNSLENBRUEsaUNBQU0sQ0FDTCxXQUFXLENBQUUsR0FDZCxDQUVBLGlDQUFNLENBQ0wsV0FBVyxDQUFFLEdBQ2QsQ0FFQSxtQ0FBUSxDQUNQLE1BQU0sQ0FBRSxDQUFDLENBQ1QsUUFBUSxDQUFFLE1BQ1gsQ0FFQSxvQ0FBUyxDQUNSLFNBQVMsQ0FBRSxPQUFPLE1BQU0sQ0FDekIsQ0FFQSx3Q0FBYSxDQUNaLGNBQWMsQ0FBRSw4REFBOEQsQ0FDOUUsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsZ0JBQWdCLENBQUUsSUFBSSxjQUFjLENBQUMsQ0FDckMsYUFBYSxDQUFFLE1BQU0sQ0FDckIsUUFBUSxDQUFFLE1BQ1gsQ0FFQSw2Q0FBa0IsQ0FDakIsVUFBVSxDQUFFLElBQ2IsQ0FFQSxrREFBdUIsQ0FDdEIsT0FBTyxDQUFFLEtBQUssQ0FDZCxLQUFLLENBQUUsSUFBSSxDQUNYLEtBQUssQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNoQyxnQkFBZ0IsQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUMzQyxPQUFPLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FDZCxPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxNQUFNLENBQ3ZCLFlBQVksQ0FBRSxXQUFXLENBQ3pCLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUNkLENBRUEsa0RBQXNCLElBQUksTUFBTSxDQUFFLENBQ2pDLEtBQUssQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNoQyxnQkFBZ0IsQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDM0MsQ0FFQSxnREFBcUIsQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixPQUFPLENBQUUsR0FBRyxDQUNaLGNBQWMsQ0FBRSxDQUFDLENBQ2pCLGVBQWUsQ0FBRSxhQUFhLENBQzlCLFdBQVcsQ0FBRSxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQ3ZGLENBRUEsK0NBQW9CLENBQ25CLEtBQUssQ0FBRSxJQUFJLGdCQUFnQixDQUFDLG9DQUFvQyxDQUNqRSxDQUVBLHlEQUE4QixDQUM3QixLQUFLLENBQUUsSUFBSSwwQkFBMEIsQ0FBQyw2Q0FBNkMsQ0FDcEYsQ0FFQSwwREFBK0IsQ0FDOUIsS0FBSyxDQUFFLElBQUksMkJBQTJCLENBQUMsaURBQWlELENBQ3pGLENBRUEsMEJBQVksQ0FBQyxpQkFBSSxDQUNoQixLQUFLLENBQUUsSUFBSSxpQkFBaUIsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUNsRSxnQkFBZ0IsQ0FBRSxJQUFJLGNBQWMsQ0FBQyxDQUNyQyxTQUFTLENBQUUsR0FBRyxDQUNkLGFBQWEsQ0FBRSxDQUFDLENBQ2hCLE9BQU8sQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUNwQixDQUVBLGlDQUFNLENBQ0wsS0FBSyxDQUFFLElBQUksU0FBUyxDQUFDLHdDQUF3QyxDQUM5RCxDQUVBLG9DQUFTLENBQ1IsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLGtDQUFrQyxDQUMzRCxDQUVBLHFDQUFVLENBQ1QsS0FBSyxDQUFFLElBQUksYUFBYSxDQUFDLG1DQUFtQyxDQUM3RCxDQUVBLGtDQUFPLENBQ04sS0FBSyxDQUFFLElBQUksVUFBVSxDQUFDLGdDQUFnQyxDQUN2RCxDQUVRLHVCQUF5QixDQUNoQyxLQUFLLENBQUUsSUFBSSxhQUFhLENBQUMsbUNBQW1DLENBQzdELENBRVEsMEJBQTRCLENBQ25DLEtBQUssQ0FBRSxJQUFJLGdCQUFnQixDQUFDLHNDQUFzQyxDQUNuRSxDQUVRLHdCQUEwQixDQUNqQyxLQUFLLENBQUUsSUFBSSxjQUFjLENBQUMsb0NBQW9DLENBQy9ELENBRVEsMkJBQTZCLENBQ3BDLEtBQUssQ0FBRSxJQUFJLGlCQUFpQixDQUFDLHVDQUF1QyxDQUNyRSxDQUVRLDBCQUE0QixDQUNuQyxLQUFLLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxzQ0FBc0MsQ0FDbkUsQ0FFUSwwQkFBNEIsQ0FDbkMsS0FBSyxDQUFFLElBQUksZ0JBQWdCLENBQUMsc0NBQXNDLENBQ25FLENBRVEsd0JBQTBCLENBQ2pDLEtBQUssQ0FBRSxJQUFJLGNBQWMsQ0FBQyxvQ0FBb0MsQ0FDL0QsQ0FFUSx1QkFBeUIsQ0FDaEMsS0FBSyxDQUFFLElBQUksYUFBYSxDQUFDLG1DQUFtQyxDQUM3RCxDQUVRLDZCQUErQixDQUN0QyxLQUFLLENBQUUsSUFBSSxtQkFBbUIsQ0FBQyx5Q0FBeUMsQ0FDekUsQ0FFUSw0QkFBOEIsQ0FDckMsS0FBSyxDQUFFLElBQUksa0JBQWtCLENBQUMsd0NBQXdDLENBQ3ZFLENBRVEsMEJBQTRCLENBQ25DLEtBQUssQ0FBRSxJQUFJLGdCQUFnQixDQUFDLHNDQUFzQyxDQUNuRSxDQUVRLHlCQUEyQixDQUNsQyxLQUFLLENBQUUsSUFBSSxlQUFlLENBQUMscUNBQXFDLENBQ2pFLENBRUEsMEJBQVksQ0FBQyxpQkFBRyxtQkFBb0IsQ0FDbkMsS0FBSyxDQUFFLElBQUksYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQzFELE1BQU0sQ0FBRSxJQUFJLGNBQWMsQ0FBQyxpQ0FBaUMsQ0FDN0QsQ0FFQSwwQkFBWSxDQUFDLGlCQUFHLHlCQUEwQixDQUN6QyxhQUFhLENBQUUsSUFBSSxDQUNuQixnQkFBZ0IsQ0FBRTtBQUNwQixHQUFHLG1CQUFtQjtBQUN0QjtBQUNBLEVBQUUsQ0FDRCxDQUNBLDBCQUFZLElBQUksYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGlCQUFHLHlCQUEwQixDQUNuRSxhQUFhLENBQUUsSUFBSSxDQUNuQixnQkFBZ0IsQ0FBRTtBQUNwQixHQUFHLHlCQUF5QjtBQUM1QjtBQUNBLEVBQUUsQ0FDRCxDQUVBLDBCQUFZLENBQUMsaUJBQUcseUJBQTBCLENBQ3pDLGFBQWEsQ0FBRSxJQUFJLENBQ25CLGdCQUFnQixDQUFFO0FBQ3BCLEdBQUcsbUJBQW1CO0FBQ3RCO0FBQ0EsRUFBRSxDQUNELENBQ0EsMEJBQVksSUFBSSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsaUJBQUcseUJBQTBCLENBQ25FLGFBQWEsQ0FBRSxJQUFJLENBQ25CLGdCQUFnQixDQUFFO0FBQ3BCLEdBQUcseUJBQXlCO0FBQzVCO0FBQ0EsRUFBRSxDQUNEIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIlN1cGVyRGVidWcuc3ZlbHRlIl19 */");
}
function create_if_block(ctx) {
  let div;
  let t0;
  let pre;
  let code;
  let pre_class_value;
  let t1;
  let current;
  let if_block0 = (
    /*label*/
    (ctx[4] || /*status*/
    ctx[3]) && create_if_block_3(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[19].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[18],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  let if_block1 = (
    /*collapsible*/
    ctx[7] && create_if_block_1(ctx)
  );
  const block = {
    c: function create() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      pre = element("pre");
      code = element("code");
      if (default_slot_or_fallback)
        default_slot_or_fallback.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      var div_nodes = children(div);
      if (if_block0)
        if_block0.l(div_nodes);
      t0 = claim_space(div_nodes);
      pre = claim_element(div_nodes, "PRE", { class: true });
      var pre_nodes = children(pre);
      code = claim_element(pre_nodes, "CODE", { class: true });
      var code_nodes = children(code);
      if (default_slot_or_fallback)
        default_slot_or_fallback.l(code_nodes);
      code_nodes.forEach(detach_dev);
      pre_nodes.forEach(detach_dev);
      t1 = claim_space(div_nodes);
      if (if_block1)
        if_block1.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(code, "class", "super-debug--code");
      add_location(code, file, 354, 19, 9357);
      attr_dev(pre, "class", pre_class_value = "super-debug--pre " + /*label*/
      (ctx[4] === "" ? "pt-4" : "pt-0") + " svelte-ugkavp");
      toggle_class(
        pre,
        "hidden",
        /*collapsed*/
        ctx[1]
      );
      add_location(pre, file, 351, 2, 9244);
      attr_dev(div, "class", "super-debug svelte-ugkavp");
      attr_dev(
        div,
        "style",
        /*themeStyle*/
        ctx[9]
      );
      add_location(div, file, 335, 1, 8735);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append_hydration_dev(div, t0);
      append_hydration_dev(div, pre);
      append_hydration_dev(pre, code);
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(code, null);
      }
      ctx[20](pre);
      append_hydration_dev(div, t1);
      if (if_block1)
        if_block1.m(div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*label*/
        ctx2[4] || /*status*/
        ctx2[3]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3(ctx2);
          if_block0.c();
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        262144)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[18],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[18]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[18],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*$debugData, raw, promise*/
        2144)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (!current || dirty & /*label*/
      16 && pre_class_value !== (pre_class_value = "super-debug--pre " + /*label*/
      (ctx2[4] === "" ? "pt-4" : "pt-0") + " svelte-ugkavp")) {
        attr_dev(pre, "class", pre_class_value);
      }
      if (!current || dirty & /*label, collapsed*/
      18) {
        toggle_class(
          pre,
          "hidden",
          /*collapsed*/
          ctx2[1]
        );
      }
      if (
        /*collapsible*/
        ctx2[7]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_1(ctx2);
          if_block1.c();
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*themeStyle*/
      512) {
        attr_dev(
          div,
          "style",
          /*themeStyle*/
          ctx2[9]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (if_block0)
        if_block0.d();
      if (default_slot_or_fallback)
        default_slot_or_fallback.d(detaching);
      ctx[20](null);
      if (if_block1)
        if_block1.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(335:0) {#if display}",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let div1_class_value;
  let if_block = (
    /*status*/
    ctx[3] && create_if_block_4(ctx)
  );
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(
        /*label*/
        ctx[4]
      );
      t1 = space();
      if (if_block)
        if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(
        div0_nodes,
        /*label*/
        ctx[4]
      );
      div0_nodes.forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      if (if_block)
        if_block.l(div1_nodes);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", "super-debug--label svelte-ugkavp");
      add_location(div0, file, 338, 4, 8894);
      attr_dev(div1, "class", div1_class_value = "super-debug--status " + /*label*/
      (ctx[4] === "" ? "absolute inset-x-0 top-0" : "") + " svelte-ugkavp");
      add_location(div1, file, 337, 3, 8807);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      append_hydration_dev(div0, t0);
      append_hydration_dev(div1, t1);
      if (if_block)
        if_block.m(div1, null);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*label*/
      16)
        set_data_dev(
          t0,
          /*label*/
          ctx2[4]
        );
      if (
        /*status*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_4(ctx2);
          if_block.c();
          if_block.m(div1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*label*/
      16 && div1_class_value !== (div1_class_value = "super-debug--status " + /*label*/
      (ctx2[4] === "" ? "absolute inset-x-0 top-0" : "") + " svelte-ugkavp")) {
        attr_dev(div1, "class", div1_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div1);
      }
      if (if_block)
        if_block.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(337:2) {#if label || status}",
    ctx
  });
  return block;
}
function create_if_block_4(ctx) {
  let div;
  let t_value = (
    /*$page*/
    ctx[10].status + ""
  );
  let t;
  const block = {
    c: function create() {
      div = element("div");
      t = text(t_value);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t = claim_text(div_nodes, t_value);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "svelte-ugkavp");
      toggle_class(
        div,
        "info",
        /*$page*/
        ctx[10].status < 200
      );
      toggle_class(
        div,
        "success",
        /*$page*/
        ctx[10].status >= 200 && /*$page*/
        ctx[10].status < 300
      );
      toggle_class(
        div,
        "redirect",
        /*$page*/
        ctx[10].status >= 300 && /*$page*/
        ctx[10].status < 400
      );
      toggle_class(
        div,
        "error",
        /*$page*/
        ctx[10].status >= 400
      );
      add_location(div, file, 340, 5, 8962);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      append_hydration_dev(div, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$page*/
      1024 && t_value !== (t_value = /*$page*/
      ctx2[10].status + ""))
        set_data_dev(t, t_value);
      if (dirty & /*$page*/
      1024) {
        toggle_class(
          div,
          "info",
          /*$page*/
          ctx2[10].status < 200
        );
      }
      if (dirty & /*$page*/
      1024) {
        toggle_class(
          div,
          "success",
          /*$page*/
          ctx2[10].status >= 200 && /*$page*/
          ctx2[10].status < 300
        );
      }
      if (dirty & /*$page*/
      1024) {
        toggle_class(
          div,
          "redirect",
          /*$page*/
          ctx2[10].status >= 300 && /*$page*/
          ctx2[10].status < 400
        );
      }
      if (dirty & /*$page*/
      1024) {
        toggle_class(
          div,
          "error",
          /*$page*/
          ctx2[10].status >= 400
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(340:4) {#if status}",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let html_tag;
  let raw_1_value = (
    /*syntaxHighlight*/
    ctx[13](
      /*$debugData*/
      ctx[11]
    ) + ""
  );
  let html_anchor;
  const block = {
    c: function create() {
      html_tag = new HtmlTagHydration(false);
      html_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      html_tag = claim_html_tag(nodes, false);
      html_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      html_tag.a = html_anchor;
    },
    m: function mount(target, anchor) {
      html_tag.m(raw_1_value, target, anchor);
      insert_hydration_dev(target, html_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$debugData*/
      2048 && raw_1_value !== (raw_1_value = /*syntaxHighlight*/
      ctx2[13](
        /*$debugData*/
        ctx2[11]
      ) + ""))
        html_tag.p(raw_1_value);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(html_anchor);
        html_tag.d();
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(361:47) {:else}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let await_block_anchor;
  let promise_1;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: true,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 22,
    error: 23
  };
  handle_promise(promise_1 = /*$debugData*/
  ctx[11], info);
  const block = {
    c: function create() {
      await_block_anchor = empty();
      info.block.c();
    },
    l: function claim(nodes) {
      await_block_anchor = empty();
      info.block.l(nodes);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*$debugData*/
      2048 && promise_1 !== (promise_1 = /*$debugData*/
      ctx[11]) && handle_promise(promise_1, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(357:6) {#if assertPromise($debugData, raw, promise)}",
    ctx
  });
  return block;
}
function create_catch_block(ctx) {
  let span;
  let textContent = "Rejected:";
  let t1;
  let html_tag;
  let raw_1_value = (
    /*syntaxHighlight*/
    ctx[13](
      /*error*/
      ctx[23]
    ) + ""
  );
  let html_anchor;
  const block = {
    c: function create() {
      span = element("span");
      span.textContent = textContent;
      t1 = text(" ");
      html_tag = new HtmlTagHydration(false);
      html_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(span) !== "svelte-1dplpxh")
        span.textContent = textContent;
      t1 = claim_text(nodes, " ");
      html_tag = claim_html_tag(nodes, false);
      html_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "super-debug--promise-rejected svelte-ugkavp");
      add_location(span, file, 359, 23, 9658);
      html_tag.a = html_anchor;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span, anchor);
      insert_hydration_dev(target, t1, anchor);
      html_tag.m(raw_1_value, target, anchor);
      insert_hydration_dev(target, html_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$debugData*/
      2048 && raw_1_value !== (raw_1_value = /*syntaxHighlight*/
      ctx2[13](
        /*error*/
        ctx2[23]
      ) + ""))
        html_tag.p(raw_1_value);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(span);
        detach_dev(t1);
        detach_dev(html_anchor);
        html_tag.d();
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_catch_block.name,
    type: "catch",
    source: "(360:9) {:catch error}",
    ctx
  });
  return block;
}
function create_then_block(ctx) {
  let html_tag;
  let raw_1_value = (
    /*syntaxHighlight*/
    ctx[13](assertStore(
      /*result*/
      ctx[22],
      /*raw*/
      ctx[6]
    ) ? get_store_value(
      /*result*/
      ctx[22]
    ) : (
      /*result*/
      ctx[22]
    )) + ""
  );
  let html_anchor;
  const block = {
    c: function create() {
      html_tag = new HtmlTagHydration(false);
      html_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      html_tag = claim_html_tag(nodes, false);
      html_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      html_tag.a = html_anchor;
    },
    m: function mount(target, anchor) {
      html_tag.m(raw_1_value, target, anchor);
      insert_hydration_dev(target, html_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$debugData, raw*/
      2112 && raw_1_value !== (raw_1_value = /*syntaxHighlight*/
      ctx2[13](assertStore(
        /*result*/
        ctx2[22],
        /*raw*/
        ctx2[6]
      ) ? get_store_value(
        /*result*/
        ctx2[22]
      ) : (
        /*result*/
        ctx2[22]
      )) + ""))
        html_tag.p(raw_1_value);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(html_anchor);
        html_tag.d();
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_then_block.name,
    type: "then",
    source: "(358:66) {:then result}",
    ctx
  });
  return block;
}
function create_pending_block(ctx) {
  let div;
  let textContent = "Loading data...";
  const block = {
    c: function create() {
      div = element("div");
      div.textContent = textContent;
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true, ["data-svelte-h"]: true });
      if (get_svelte_dataset(div) !== "svelte-phqra4")
        div.textContent = textContent;
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "super-debug--promise-loading svelte-ugkavp");
      add_location(div, file, 356, 70, 9470);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_pending_block.name,
    type: "pending",
    source: '(357:70) <div         class=\\"super-debug--promise-loading\\">Loading data...</div>{:then result}',
    ctx
  });
  return block;
}
function fallback_block(ctx) {
  let show_if;
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (dirty & /*$debugData, raw, promise*/
    2144)
      show_if = null;
    if (show_if == null)
      show_if = !!assertPromise(
        /*$debugData*/
        ctx2[11],
        /*raw*/
        ctx2[6],
        /*promise*/
        ctx2[5]
      );
    if (show_if)
      return create_if_block_2;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(357:6) {#if assertPromise($debugData, raw, promise)}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let button;
  let svg;
  let path;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      button = element("button");
      svg = svg_element("svg");
      path = svg_element("path");
      this.h();
    },
    l: function claim(nodes) {
      button = claim_element(nodes, "BUTTON", { type: true, class: true });
      var button_nodes = children(button);
      svg = claim_svg_element(button_nodes, "svg", {
        xmlns: true,
        width: true,
        height: true,
        viewBox: true,
        class: true
      });
      var svg_nodes = children(svg);
      path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
      children(path).forEach(detach_dev);
      svg_nodes.forEach(detach_dev);
      button_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(path, "fill", "currentColor");
      attr_dev(path, "d", "M4.08 11.92L12 4l7.92 7.92l-1.42 1.41l-5.5-5.5V22h-2V7.83l-5.5 5.5l-1.42-1.41M12 4h10V2H2v2h10Z");
      add_location(path, file, 377, 6, 10149);
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "20");
      attr_dev(svg, "height", "20");
      attr_dev(svg, "viewBox", "0 0 24 24");
      attr_dev(svg, "class", "svelte-ugkavp");
      toggle_class(
        svg,
        "rotated",
        /*collapsed*/
        ctx[1]
      );
      add_location(svg, file, 371, 4, 10009);
      attr_dev(button, "type", "button");
      attr_dev(button, "class", "super-debug--collapse svelte-ugkavp");
      add_location(button, file, 366, 3, 9880);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, button, anchor);
      append_hydration_dev(button, svg);
      append_hydration_dev(svg, path);
      if (!mounted) {
        dispose = listen_dev(button, "click", prevent_default(
          /*click_handler*/
          ctx[21]
        ), false, true, false, false);
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*collapsed*/
      2) {
        toggle_class(
          svg,
          "rotated",
          /*collapsed*/
          ctx2[1]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(button);
      }
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(366:2) {#if collapsible}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*display*/
    ctx[2] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*display*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*display*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function fileToJSON(file2) {
  return {
    name: file2.name,
    size: file2.size,
    type: file2.type,
    lastModified: new Date(file2.lastModified)
  };
}
function assertPromise(data, raw, promise) {
  if (raw) {
    return false;
  }
  return promise || typeof data === "object" && data !== null && "then" in data && typeof data["then"] === "function";
}
function assertStore(data, raw) {
  if (raw) {
    return false;
  }
  return typeof data === "object" && data !== null && "subscribe" in data && typeof data["subscribe"] === "function";
}
function instance($$self, $$props, $$invalidate) {
  let themeStyle;
  let debugData;
  let $page;
  let $debugData, $$unsubscribe_debugData = noop, $$subscribe_debugData = () => ($$unsubscribe_debugData(), $$unsubscribe_debugData = subscribe(debugData, ($$value) => $$invalidate(11, $debugData = $$value)), debugData);
  validate_store(page, "page");
  component_subscribe($$self, page, ($$value) => $$invalidate(10, $page = $$value));
  $$self.$$.on_destroy.push(() => $$unsubscribe_debugData());
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SuperDebug", slots, ["default"]);
  let { data } = $$props;
  let { display = true } = $$props;
  let { status = true } = $$props;
  let { label = "" } = $$props;
  let { stringTruncate = 120 } = $$props;
  let { ref = void 0 } = $$props;
  let { promise = false } = $$props;
  let { raw = false } = $$props;
  let { functions = false } = $$props;
  let { theme = "default" } = $$props;
  let { collapsible = false } = $$props;
  let { collapsed = false } = $$props;
  if (browser && collapsible)
    setCollapse();
  function setCollapse(status2 = void 0) {
    let data2;
    const route = $page.route.id ?? "";
    try {
      if (sessionStorage.SuperDebug) {
        data2 = JSON.parse(sessionStorage.SuperDebug);
      }
      data2 = {
        collapsed: data2 && data2.collapsed ? data2.collapsed : {}
      };
      data2.collapsed[route] = status2 === void 0 ? data2.collapsed[route] ?? collapsed : status2;
    } catch {
      data2 = { collapsed: { [route]: collapsed } };
    }
    if (status2 !== void 0) {
      sessionStorage.SuperDebug = JSON.stringify(data2);
    }
    $$invalidate(1, collapsed = data2.collapsed[route]);
  }
  function syntaxHighlight(json2) {
    switch (typeof json2) {
      case "function": {
        return `<span class="function">[function ${json2.name ?? "unnamed"}]</span>`;
      }
      case "symbol": {
        return `<span class="symbol">${json2.toString()}</span>`;
      }
    }
    const encodedString = JSON.stringify(
      json2,
      function(key, value) {
        if (value === void 0) {
          return "#}#undefined";
        }
        if (typeof this === "object" && this[key] instanceof Date) {
          return "#}D#" + (isNaN(this[key]) ? "Invalid Date" : value);
        }
        if (typeof value === "number") {
          if (value == Number.POSITIVE_INFINITY)
            return "#}#Inf";
          if (value == Number.NEGATIVE_INFINITY)
            return "#}#-Inf";
          if (isNaN(value))
            return "#}#NaN";
        }
        if (typeof value === "bigint") {
          return "#}BI#" + value;
        }
        if (typeof value === "function" && functions) {
          return `#}F#[function ${value.name}]`;
        }
        if (value instanceof Error) {
          return `#}E#${value.name}: ${value.message || value.cause || "(No error message)"}`;
        }
        if (browser && typeof this === "object" && this[key] instanceof File) {
          return fileToJSON(this[key]);
        }
        if (browser && typeof this === "object" && this[key] instanceof FileList) {
          const list = this[key];
          const output = [];
          for (let i = 0; i < list.length; i++) {
            const file2 = list.item(i);
            if (file2)
              output.push(fileToJSON(file2));
          }
          return output;
        }
        return value;
      },
      2
    ).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return encodedString.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)/g, function(match) {
      let cls = "number";
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = "key";
          match = match.slice(1, -2) + ":";
        } else {
          cls = "string";
          match = stringTruncate > 0 && match.length > stringTruncate ? match.slice(0, stringTruncate / 2) + `[..${match.length - stringTruncate}/${match.length}..]` + match.slice(-stringTruncate / 2) : match;
          if (match == '"#}#undefined"') {
            cls = "undefined";
            match = "undefined";
          } else if (match.startsWith('"#}D#')) {
            cls = "date";
            match = match.slice(5, -1);
          } else if (match == '"#}#NaN"') {
            cls = "nan";
            match = "NaN";
          } else if (match == '"#}#Inf"') {
            cls = "nan";
            match = "Infinity";
          } else if (match == '"#}#-Inf"') {
            cls = "nan";
            match = "-Infinity";
          } else if (match.startsWith('"#}BI#')) {
            cls = "bigint";
            match = match.slice(6, -1) + "n";
          } else if (match.startsWith('"#}F#')) {
            cls = "function";
            match = match.slice(5, -1);
          } else if (match.startsWith('"#}E#')) {
            cls = "error";
            match = match.slice(5, -1);
          }
        }
      } else if (/true|false/.test(match)) {
        cls = "boolean";
      } else if (/null/.test(match)) {
        cls = "null";
      }
      return '<span class="' + cls + '">' + match + "</span>";
    });
  }
  $$self.$$.on_mount.push(function() {
    if (data === void 0 && !("data" in $$props || $$self.$$.bound[$$self.$$.props["data"]])) {
      console.warn("<SuperDebug> was created without expected prop 'data'");
    }
  });
  const writable_props = [
    "data",
    "display",
    "status",
    "label",
    "stringTruncate",
    "ref",
    "promise",
    "raw",
    "functions",
    "theme",
    "collapsible",
    "collapsed"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<SuperDebug> was created with unknown prop '${key}'`);
  });
  function pre_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  const click_handler = () => setCollapse(!collapsed);
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(14, data = $$props2.data);
    if ("display" in $$props2)
      $$invalidate(2, display = $$props2.display);
    if ("status" in $$props2)
      $$invalidate(3, status = $$props2.status);
    if ("label" in $$props2)
      $$invalidate(4, label = $$props2.label);
    if ("stringTruncate" in $$props2)
      $$invalidate(15, stringTruncate = $$props2.stringTruncate);
    if ("ref" in $$props2)
      $$invalidate(0, ref = $$props2.ref);
    if ("promise" in $$props2)
      $$invalidate(5, promise = $$props2.promise);
    if ("raw" in $$props2)
      $$invalidate(6, raw = $$props2.raw);
    if ("functions" in $$props2)
      $$invalidate(16, functions = $$props2.functions);
    if ("theme" in $$props2)
      $$invalidate(17, theme = $$props2.theme);
    if ("collapsible" in $$props2)
      $$invalidate(7, collapsible = $$props2.collapsible);
    if ("collapsed" in $$props2)
      $$invalidate(1, collapsed = $$props2.collapsed);
    if ("$$scope" in $$props2)
      $$invalidate(18, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    browser,
    page,
    readable,
    get: get_store_value,
    data,
    display,
    status,
    label,
    stringTruncate,
    ref,
    promise,
    raw,
    functions,
    theme,
    collapsible,
    collapsed,
    setCollapse,
    fileToJSON,
    syntaxHighlight,
    assertPromise,
    assertStore,
    debugData,
    themeStyle,
    $page,
    $debugData
  });
  $$self.$inject_state = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(14, data = $$props2.data);
    if ("display" in $$props2)
      $$invalidate(2, display = $$props2.display);
    if ("status" in $$props2)
      $$invalidate(3, status = $$props2.status);
    if ("label" in $$props2)
      $$invalidate(4, label = $$props2.label);
    if ("stringTruncate" in $$props2)
      $$invalidate(15, stringTruncate = $$props2.stringTruncate);
    if ("ref" in $$props2)
      $$invalidate(0, ref = $$props2.ref);
    if ("promise" in $$props2)
      $$invalidate(5, promise = $$props2.promise);
    if ("raw" in $$props2)
      $$invalidate(6, raw = $$props2.raw);
    if ("functions" in $$props2)
      $$invalidate(16, functions = $$props2.functions);
    if ("theme" in $$props2)
      $$invalidate(17, theme = $$props2.theme);
    if ("collapsible" in $$props2)
      $$invalidate(7, collapsible = $$props2.collapsible);
    if ("collapsed" in $$props2)
      $$invalidate(1, collapsed = $$props2.collapsed);
    if ("debugData" in $$props2)
      $$subscribe_debugData($$invalidate(8, debugData = $$props2.debugData));
    if ("themeStyle" in $$props2)
      $$invalidate(9, themeStyle = $$props2.themeStyle);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*theme*/
    131072) {
      $:
        $$invalidate(9, themeStyle = theme === "vscode" ? `
      --sd-vscode-bg-color: #1f1f1f;
      --sd-vscode-label-color: #cccccc;
      --sd-vscode-code-default: #8c8a89;
      --sd-vscode-code-key: #9cdcfe;
      --sd-vscode-code-string: #ce9171;
      --sd-vscode-code-number: #b5c180;
      --sd-vscode-code-boolean: #4a9cd6;
      --sd-vscode-code-null: #4a9cd6;
      --sd-vscode-code-undefined: #4a9cd6;
      --sd-vscode-code-nan: #4a9cd6;
      --sd-vscode-code-symbol: #4de0c5;
      --sd-vscode-sb-thumb-color: #35373a;
      --sd-vscode-sb-thumb-color-focus: #4b4d50;
    ` : void 0);
    }
    if ($$self.$$.dirty & /*data, raw*/
    16448) {
      $:
        $$subscribe_debugData($$invalidate(8, debugData = assertStore(data, raw) ? data : readable(data)));
    }
  };
  return [
    ref,
    collapsed,
    display,
    status,
    label,
    promise,
    raw,
    collapsible,
    debugData,
    themeStyle,
    $page,
    $debugData,
    setCollapse,
    syntaxHighlight,
    data,
    stringTruncate,
    functions,
    theme,
    $$scope,
    slots,
    pre_binding,
    click_handler
  ];
}
var SuperDebug = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        data: 14,
        display: 2,
        status: 3,
        label: 4,
        stringTruncate: 15,
        ref: 0,
        promise: 5,
        raw: 6,
        functions: 16,
        theme: 17,
        collapsible: 7,
        collapsed: 1
      },
      add_css
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SuperDebug",
      options,
      id: create_fragment.name
    });
  }
  get data() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get display() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set display(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get status() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set status(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get stringTruncate() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set stringTruncate(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ref() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ref(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get promise() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set promise(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get raw() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set raw(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get functions() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set functions(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get theme() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set theme(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get collapsible() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set collapsible(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get collapsed() {
    throw new Error_1("<SuperDebug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set collapsed(value) {
    throw new Error_1("<SuperDebug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SuperDebug_default = SuperDebug;

// node_modules/sveltekit-superforms/dist/traversal.js
function setPath(parent, key, value) {
  parent[key] = value;
  return "skip";
}
function isInvalidPath(originalPath, pathData) {
  return pathData.value !== void 0 && typeof pathData.value !== "object" && pathData.path.length < originalPath.length;
}
function pathExists(obj, path, options = {}) {
  if (!options.modifier) {
    options.modifier = (pathData) => isInvalidPath(path, pathData) ? void 0 : pathData.value;
  }
  const exists = traversePath(obj, path, options.modifier);
  if (!exists)
    return void 0;
  if (options.value === void 0)
    return exists;
  return options.value(exists.value) ? exists : void 0;
}
function traversePath(obj, realPath, modifier) {
  if (!realPath.length)
    return void 0;
  const path = [realPath[0]];
  let parent = obj;
  while (path.length < realPath.length) {
    const key2 = path[path.length - 1];
    const value = modifier ? modifier({
      parent,
      key: String(key2),
      value: parent[key2],
      path: path.map((p) => String(p)),
      isLeaf: false,
      set: (v) => setPath(parent, key2, v)
    }) : parent[key2];
    if (value === void 0)
      return void 0;
    else
      parent = value;
    path.push(realPath[path.length]);
  }
  if (!parent)
    return void 0;
  const key = realPath[realPath.length - 1];
  return {
    parent,
    key: String(key),
    value: parent[key],
    path: realPath.map((p) => String(p)),
    isLeaf: true,
    set: (v) => setPath(parent, key, v)
  };
}
function traversePaths(parent, modifier, path = []) {
  for (const key in parent) {
    const value = parent[key];
    const isLeaf = value === null || typeof value !== "object";
    const pathData = {
      parent,
      key,
      value,
      path: path.concat([key]),
      // path.map(String).concat([key])
      isLeaf,
      set: (v) => setPath(parent, key, v)
    };
    const status = modifier(pathData);
    if (status === "abort")
      return status;
    else if (status === "skip")
      continue;
    else if (!isLeaf) {
      const status2 = traversePaths(value, modifier, pathData.path);
      if (status2 === "abort")
        return status2;
    }
  }
}
function eqSet(xs, ys) {
  return xs === ys || xs.size === ys.size && [...xs].every((x) => ys.has(x));
}
function comparePaths(newObj, oldObj) {
  const diffPaths = /* @__PURE__ */ new Map();
  function checkPath(data, compareTo) {
    const exists = compareTo ? traversePath(compareTo, data.path) : void 0;
    function addDiff() {
      diffPaths.set(data.path.join(" "), data.path);
      return "skip";
    }
    if (data.isLeaf) {
      if (!exists) {
        addDiff();
      } else if (data.value !== exists.value) {
        addDiff();
      }
    } else if (exists) {
      if ((data.value instanceof Date || exists.value instanceof Date) && (!!data.value != !!exists.value || data.value.getTime() != exists.value.getTime())) {
        return addDiff();
      } else if ((data.value instanceof Set || exists.value instanceof Set) && (!!data.value != !!exists.value || !eqSet(data.value, exists.value))) {
        return addDiff();
      } else if ((data.value instanceof File || exists.value instanceof File) && (!!data.value != !!exists.value || data.value !== exists.value)) {
        return addDiff();
      }
    }
  }
  traversePaths(newObj, (data) => checkPath(data, oldObj));
  traversePaths(oldObj, (data) => checkPath(data, newObj));
  return Array.from(diffPaths.values());
}
function setPaths(obj, paths, value) {
  const isFunction = typeof value === "function";
  for (const path of paths) {
    const leaf = traversePath(obj, path, ({ parent, key, value: value2 }) => {
      if (value2 === void 0 || typeof value2 !== "object") {
        parent[key] = {};
      }
      return parent[key];
    });
    if (leaf)
      leaf.parent[leaf.key] = isFunction ? value(path, leaf) : value;
  }
}

// node_modules/sveltekit-superforms/dist/stringPath.js
function splitPath(path) {
  return path.toString().split(/[[\].]+/).filter((p) => p);
}
function mergePath(path) {
  return path.reduce((acc, next) => {
    const key = String(next);
    if (typeof next === "number" || /^\d+$/.test(key))
      acc += `[${key}]`;
    else if (!acc)
      acc += key;
    else
      acc += `.${key}`;
    return acc;
  }, "");
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaInfo.js
var conversionFormatTypes = ["unix-time", "bigint", "any", "symbol", "set"];
function schemaInfo(schema, isOptional, path) {
  var _a;
  assertSchema(schema, path);
  if (!path)
    throw new SchemaError("Why?", path);
  const types = schemaTypes(schema, path);
  const array = schema.items && types.includes("array") ? (Array.isArray(schema.items) ? schema.items : [schema.items]).filter((s) => typeof s !== "boolean") : void 0;
  const properties = schema.properties && types.includes("object") ? Object.fromEntries(Object.entries(schema.properties).filter(([, value]) => typeof value !== "boolean")) : void 0;
  const union = (_a = unionInfo(schema)) == null ? void 0 : _a.filter((u) => u.type !== "null" && u.const !== null);
  return {
    types: types.filter((s) => s !== "null"),
    isOptional,
    isNullable: types.includes("null"),
    schema,
    union: (union == null ? void 0 : union.length) ? union : void 0,
    array,
    properties,
    required: schema.required
  };
}
function schemaTypes(schema, path) {
  assertSchema(schema, path);
  let types = schema.const === null ? ["null"] : [];
  if (schema.type) {
    types = Array.isArray(schema.type) ? schema.type : [schema.type];
  }
  if (schema.anyOf) {
    types = schema.anyOf.flatMap((s) => schemaTypes(s, path));
  }
  if (types.includes("array") && schema.uniqueItems) {
    const i = types.findIndex((t) => t != "array");
    types[i] = "set";
  } else if (schema.format && conversionFormatTypes.includes(schema.format)) {
    types.unshift(schema.format);
    if (schema.format == "unix-time") {
      const i = types.findIndex((t) => t == "integer");
      types.splice(i, 1);
    }
  }
  if (schema.const && schema.const !== null && typeof schema.const !== "function") {
    types.push(typeof schema.const);
  }
  return Array.from(new Set(types));
}
function unionInfo(schema) {
  if (!schema.anyOf || !schema.anyOf.length)
    return void 0;
  return schema.anyOf.filter((s) => typeof s !== "boolean");
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaDefaults.js
function defaultValues(schema, isOptional = false, path = []) {
  return _defaultValues(schema, isOptional, path);
}
function _defaultValues(schema, isOptional, path) {
  var _a;
  if (!schema) {
    throw new SchemaError("Schema was undefined", path);
  }
  const info = schemaInfo(schema, isOptional, path);
  if (!info)
    return void 0;
  let objectDefaults = void 0;
  if ("default" in schema) {
    if (info.types.includes("object") && schema.default && typeof schema.default == "object" && !Array.isArray(schema.default)) {
      objectDefaults = schema.default;
    } else {
      if (info.types.length > 1) {
        if (info.types.includes("unix-time") && (info.types.includes("integer") || info.types.includes("number")))
          throw new SchemaError("Cannot resolve a default value with a union that includes a date and a number/integer.", path);
      }
      const [type] = info.types;
      return formatDefaultValue(type, schema.default);
    }
  }
  let _multiType;
  const isMultiTypeUnion = () => {
    if (!info.union || info.union.length < 2)
      return false;
    if (info.union.some((i) => i.enum))
      return true;
    if (!_multiType) {
      _multiType = new Set(info.types.map((i) => {
        return ["integer", "unix-time"].includes(i) ? "number" : i;
      }));
    }
    return _multiType.size > 1;
  };
  if (!objectDefaults && info.union) {
    const singleDefault = info.union.filter((s) => typeof s !== "boolean" && s.default !== void 0);
    if (singleDefault.length == 1) {
      return _defaultValues(singleDefault[0], isOptional, path);
    } else if (singleDefault.length > 1) {
      throw new SchemaError("Only one default value can exist in a union, or set a default value for the whole union.", path);
    } else {
      if (info.isNullable)
        return null;
      if (info.isOptional)
        return void 0;
      if (isMultiTypeUnion()) {
        throw new SchemaError("Multi-type unions must have a default value, or exactly one of the union types must have.", path);
      }
    }
  }
  if (!objectDefaults) {
    if (info.isNullable)
      return null;
    if (info.isOptional)
      return void 0;
  }
  if (info.properties) {
    const output = {};
    for (const [key, value] of Object.entries(info.properties)) {
      assertSchema(value, [...path, key]);
      const def = objectDefaults && objectDefaults[key] !== void 0 ? objectDefaults[key] : _defaultValues(value, !((_a = schema.required) == null ? void 0 : _a.includes(key)), [...path, key]);
      output[key] = def;
    }
    return output;
  } else if (objectDefaults) {
    return objectDefaults;
  }
  if (schema.enum) {
    return schema.enum[0];
  }
  if (isMultiTypeUnion()) {
    throw new SchemaError("Default values cannot have more than one type.", path);
  } else if (info.types.length == 0) {
    return void 0;
  }
  const [formatType] = info.types;
  return defaultValue(formatType, schema.enum);
}
function formatDefaultValue(type, value) {
  switch (type) {
    case "set":
      return Array.isArray(value) ? new Set(value) : value;
    case "Date":
    case "date":
    case "unix-time":
      if (typeof value === "string" || typeof value === "number")
        return new Date(value);
      break;
    case "bigint":
      if (typeof value === "string" || typeof value === "number")
        return BigInt(value);
      break;
    case "symbol":
      if (typeof value === "string" || typeof value === "number")
        return Symbol(value);
      break;
  }
  return value;
}
function defaultValue(type, enumType) {
  switch (type) {
    case "string":
      return enumType && enumType.length > 0 ? enumType[0] : "";
    case "number":
    case "integer":
      return enumType && enumType.length > 0 ? enumType[0] : 0;
    case "boolean":
      return false;
    case "array":
      return [];
    case "object":
      return {};
    case "null":
      return null;
    case "Date":
    case "date":
    case "unix-time":
      return void 0;
    case "bigint":
      return BigInt(0);
    case "set":
      return /* @__PURE__ */ new Set();
    case "symbol":
      return Symbol();
    case "undefined":
    case "any":
      return void 0;
    default:
      throw new SchemaError("Schema type or format not supported, requires explicit default value: " + type);
  }
}
function defaultTypes(schema, path = []) {
  return _defaultTypes(schema, false, path);
}
function _defaultTypes(schema, isOptional, path) {
  var _a;
  if (!schema) {
    throw new SchemaError("Schema was undefined", path);
  }
  const info = schemaInfo(schema, isOptional, path);
  const output = {
    __types: info.types
  };
  if (info.schema.items && typeof info.schema.items == "object" && !Array.isArray(info.schema.items)) {
    output.__items = _defaultTypes(info.schema.items, info.isOptional, path);
  }
  if (info.properties) {
    for (const [key, value] of Object.entries(info.properties)) {
      assertSchema(value, [...path, key]);
      output[key] = _defaultTypes(info.properties[key], !((_a = info.required) == null ? void 0 : _a.includes(key)), [
        ...path,
        key
      ]);
    }
  }
  if (info.isNullable && !output.__types.includes("null")) {
    output.__types.push("null");
  }
  if (info.isOptional && !output.__types.includes("undefined")) {
    output.__types.push("undefined");
  }
  return output;
}

// node_modules/sveltekit-superforms/dist/errors.js
var SuperFormError = class _SuperFormError extends Error {
  constructor(message2) {
    super(message2);
    Object.setPrototypeOf(this, _SuperFormError.prototype);
  }
};
var SchemaError = class _SchemaError extends SuperFormError {
  constructor(message2, path) {
    super((path && path.length ? `[${Array.isArray(path) ? path.join(".") : path}] ` : "") + message2);
    __publicField(this, "path");
    this.path = Array.isArray(path) ? path.join(".") : path;
    Object.setPrototypeOf(this, _SchemaError.prototype);
  }
};
function mapErrors(errors, shape) {
  var _a;
  const output = {};
  function addFormLevelError(error) {
    if (!("_errors" in output))
      output._errors = [];
    if (!Array.isArray(output._errors)) {
      if (typeof output._errors === "string")
        output._errors = [output._errors];
      else
        throw new SuperFormError("Form-level error was not an array.");
    }
    output._errors.push(error.message);
  }
  for (const error of errors) {
    if (!error.path || error.path.length == 1 && !error.path[0]) {
      addFormLevelError(error);
      continue;
    }
    const isLastIndexNumeric = /^\d$/.test(String(error.path[error.path.length - 1]));
    const objectError = !isLastIndexNumeric && ((_a = pathExists(shape, error.path.filter((p) => /\D/.test(String(p))))) == null ? void 0 : _a.value);
    const leaf = traversePath(output, error.path, ({ value, parent: parent2, key: key2 }) => {
      if (value === void 0)
        parent2[key2] = {};
      return parent2[key2];
    });
    if (!leaf) {
      addFormLevelError(error);
      continue;
    }
    const { parent, key } = leaf;
    if (objectError) {
      if (!(key in parent))
        parent[key] = {};
      if (!("_errors" in parent[key]))
        parent[key]._errors = [error.message];
      else
        parent[key]._errors.push(error.message);
    } else {
      if (!(key in parent))
        parent[key] = [error.message];
      else
        parent[key].push(error.message);
    }
  }
  return output;
}
function updateErrors(New, Previous, force) {
  if (force)
    return New;
  traversePaths(Previous, (errors) => {
    if (!Array.isArray(errors.value))
      return;
    errors.set(void 0);
  });
  traversePaths(New, (error) => {
    if (!Array.isArray(error.value))
      return;
    setPaths(Previous, [error.path], error.value);
  });
  return Previous;
}
function flattenErrors(errors) {
  return _flattenErrors(errors, []);
}
function _flattenErrors(errors, path) {
  const entries = Object.entries(errors);
  return entries.filter(([, value]) => value !== void 0).flatMap(([key, messages]) => {
    if (Array.isArray(messages) && messages.length > 0) {
      const currPath = path.concat([key]);
      return { path: mergePath(currPath), messages };
    } else {
      return _flattenErrors(errors[key], path.concat([key]));
    }
  });
}
function mergeDefaults(parsedData, defaults2) {
  if (!parsedData)
    return clone(defaults2);
  return merge.withOptions({ mergeArrays: false }, defaults2, parsedData);
}
function replaceInvalidDefaults(Data, Defaults, _schema, Errors, preprocessed) {
  const defaultType = _schema.additionalProperties && typeof _schema.additionalProperties == "object" ? { __types: schemaInfo(_schema.additionalProperties, false, []).types } : void 0;
  const Types = defaultTypes(_schema);
  function Types_correctValue(dataValue, defValue, type) {
    const types = type.__types;
    if (!types.length || types.every((t) => t == "undefined" || t == "null" || t == "any")) {
      return dataValue;
    } else if (types.length == 1 && types[0] == "array" && !type.__items) {
      return dataValue;
    }
    const dateTypes = ["unix-time", "Date", "date"];
    for (const schemaType of types) {
      const defaultTypeValue = defaultValue(schemaType, void 0);
      const sameType = typeof dataValue === typeof defaultTypeValue || dateTypes.includes(schemaType) && dataValue instanceof Date;
      const sameExistance = sameType && dataValue === null === (defaultTypeValue === null);
      if (sameType && sameExistance) {
        return dataValue;
      } else if (type.__items) {
        return Types_correctValue(dataValue, defValue, type.__items);
      }
    }
    if (defValue === void 0 && types.includes("null")) {
      return null;
    }
    return defValue;
  }
  function Data_traverse() {
    traversePaths(Defaults, Defaults_traverseAndReplace);
    Errors_traverseAndReplace();
    return Data;
  }
  function Data_setValue(currentPath, newValue) {
    setPaths(Data, [currentPath], newValue);
  }
  function Errors_traverseAndReplace() {
    var _a;
    for (const error of Errors) {
      if (!error.path)
        continue;
      Defaults_traverseAndReplace({
        path: error.path,
        value: (_a = pathExists(Defaults, error.path)) == null ? void 0 : _a.value
      });
    }
  }
  function Defaults_traverseAndReplace(defaultPath) {
    const currentPath = defaultPath.path;
    if (!currentPath || !currentPath[0])
      return;
    if (typeof currentPath[0] === "string" && (preprocessed == null ? void 0 : preprocessed.includes(currentPath[0])))
      return;
    const dataPath = pathExists(Data, currentPath);
    if (!dataPath && defaultPath.value !== void 0 || dataPath && dataPath.value === void 0) {
      Data_setValue(currentPath, defaultPath.value);
    } else if (dataPath) {
      const defValue = defaultPath.value;
      const dataValue = dataPath.value;
      if (defValue !== void 0 && typeof dataValue === typeof defValue && dataValue === null === (defValue === null)) {
        return;
      }
      const typePath = currentPath.filter((p) => /\D/.test(String(p)));
      const pathTypes = traversePath(Types, typePath, (path) => {
        return "__items" in path.value ? path.value.__items : path.value;
      });
      if (!pathTypes) {
        throw new SchemaError("No types found for defaults", currentPath);
      }
      const fieldType = pathTypes.value ?? defaultType;
      if (!fieldType) {
        throw new SchemaError("No default value specified for field (can be undefined, but must be explicit)", currentPath);
      }
      Data_setValue(currentPath, Types_correctValue(dataValue, defValue, fieldType));
    }
  }
  {
    return Data_traverse();
  }
}

// node_modules/sveltekit-superforms/dist/index.js
var dist_default = SuperDebug_default;

// node_modules/sveltekit-superforms/dist/utils.js
function clone(data) {
  return data && typeof data === "object" ? collectionClone(data) : data;
}
function assertSchema(schema, path) {
  if (typeof schema === "boolean") {
    throw new SchemaError("Schema property cannot be defined as boolean.", path);
  }
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
import { browser as browser3 } from "$app/environment";
import { beforeNavigate, goto, invalidateAll } from "$app/navigation";

// node_modules/sveltekit-superforms/dist/client/flash.js
import { browser as browser2 } from "$app/environment";
function cancelFlash(options) {
  if (!options.flashMessage || !browser2)
    return;
  if (!shouldSyncFlash(options))
    return;
  document.cookie = `flash=; Max-Age=0; Path=${options.flashMessage.cookiePath ?? "/"};`;
}
function shouldSyncFlash(options) {
  if (!options.flashMessage || !browser2)
    return false;
  return options.syncFlashMessage;
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
import { applyAction, enhance } from "$app/forms";

// node_modules/sveltekit-superforms/dist/client/customValidity.js
var noCustomValidityDataAttribute = "noCustomValidity";
async function updateCustomValidity(validityEl, errors) {
  if ("setCustomValidity" in validityEl) {
    validityEl.setCustomValidity("");
  }
  if (noCustomValidityDataAttribute in validityEl.dataset)
    return;
  setCustomValidity(validityEl, errors);
}
function setCustomValidityForm(formElement, errors) {
  for (const el of formElement.querySelectorAll("input,select,textarea,button")) {
    if (noCustomValidityDataAttribute in el.dataset) {
      continue;
    }
    const error = traversePath(errors, splitPath(el.name));
    setCustomValidity(el, error == null ? void 0 : error.value);
    if (error == null ? void 0 : error.value)
      return;
  }
}
function setCustomValidity(el, errors) {
  const message2 = errors && errors.length ? errors.join("\n") : "";
  el.setCustomValidity(message2);
  if (message2)
    el.reportValidity();
}

// node_modules/sveltekit-superforms/dist/client/elements.js
var isElementInViewport = (el, topOffset = 0) => {
  const rect = el.getBoundingClientRect();
  return rect.top >= topOffset && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var scrollToAndCenter = (el, offset = 1.125, behavior = "smooth") => {
  const elementRect = el.getBoundingClientRect();
  const absoluteElementTop = elementRect.top + window.pageYOffset;
  const top = absoluteElementTop - window.innerHeight / (2 * offset);
  window.scrollTo({ left: 0, top, behavior });
};
var immediateInputTypes = ["checkbox", "radio", "range", "file"];
function inputInfo(el) {
  const immediate = !!el && (el instanceof HTMLSelectElement || el instanceof HTMLInputElement && immediateInputTypes.includes(el.type));
  const multiple = !!el && el instanceof HTMLSelectElement && el.multiple;
  const file2 = !!el && el instanceof HTMLInputElement && el.type == "file";
  return { immediate, multiple, file: file2 };
}

// node_modules/sveltekit-superforms/dist/client/form.js
var FetchStatus;
(function(FetchStatus2) {
  FetchStatus2[FetchStatus2["Idle"] = 0] = "Idle";
  FetchStatus2[FetchStatus2["Submitting"] = 1] = "Submitting";
  FetchStatus2[FetchStatus2["Delayed"] = 2] = "Delayed";
  FetchStatus2[FetchStatus2["Timeout"] = 3] = "Timeout";
})(FetchStatus || (FetchStatus = {}));
var activeTimers = /* @__PURE__ */ new Set();
function Form(formElement, timers, options) {
  let state = FetchStatus.Idle;
  let delayedTimeout, timeoutTimeout;
  const Timers = activeTimers;
  function Timers_start() {
    Timers_clear();
    Timers_setState(state != FetchStatus.Delayed ? FetchStatus.Submitting : FetchStatus.Delayed);
    delayedTimeout = window.setTimeout(() => {
      if (delayedTimeout && state == FetchStatus.Submitting)
        Timers_setState(FetchStatus.Delayed);
    }, options.delayMs);
    timeoutTimeout = window.setTimeout(() => {
      if (timeoutTimeout && state == FetchStatus.Delayed)
        Timers_setState(FetchStatus.Timeout);
    }, options.timeoutMs);
    Timers.add(Timers_clear);
  }
  function Timers_clear() {
    clearTimeout(delayedTimeout);
    clearTimeout(timeoutTimeout);
    delayedTimeout = timeoutTimeout = 0;
    Timers.delete(Timers_clear);
    Timers_setState(FetchStatus.Idle);
  }
  function Timers_clearAll() {
    Timers.forEach((t) => t());
    Timers.clear();
  }
  function Timers_setState(s) {
    state = s;
    timers.submitting.set(state >= FetchStatus.Submitting);
    timers.delayed.set(state >= FetchStatus.Delayed);
    timers.timeout.set(state >= FetchStatus.Timeout);
  }
  const ErrorTextEvents = formElement;
  function ErrorTextEvents__selectText(e) {
    const target = e.target;
    if (options.selectErrorText)
      target.select();
  }
  function ErrorTextEvents_addErrorTextListeners() {
    if (!options.selectErrorText)
      return;
    ErrorTextEvents.querySelectorAll("input").forEach((el) => {
      el.addEventListener("invalid", ErrorTextEvents__selectText);
    });
  }
  function ErrorTextEvents_removeErrorTextListeners() {
    if (!options.selectErrorText)
      return;
    ErrorTextEvents.querySelectorAll("input").forEach((el) => el.removeEventListener("invalid", ErrorTextEvents__selectText));
  }
  const Form2 = formElement;
  {
    ErrorTextEvents_addErrorTextListeners();
    const completed = (opts) => {
      if (!opts.clearAll)
        Timers_clear();
      else
        Timers_clearAll();
      if (!opts.cancelled)
        setTimeout(() => scrollToFirstError(Form2, options), 1);
    };
    onDestroy(() => {
      ErrorTextEvents_removeErrorTextListeners();
      completed({ cancelled: true });
    });
    return {
      submitting() {
        Timers_start();
      },
      completed,
      scrollToFirstError() {
        setTimeout(() => scrollToFirstError(Form2, options), 1);
      },
      isSubmitting: () => state === FetchStatus.Submitting || state === FetchStatus.Delayed
    };
  }
}
var scrollToFirstError = async (Form2, options) => {
  if (options.scrollToError == "off")
    return;
  const selector = options.errorSelector;
  if (!selector)
    return;
  await tick();
  let el;
  el = Form2.querySelector(selector);
  if (!el)
    return;
  el = el.querySelector(selector) ?? el;
  const nav = options.stickyNavbar ? document.querySelector(options.stickyNavbar) : null;
  if (typeof options.scrollToError != "string") {
    el.scrollIntoView(options.scrollToError);
  } else if (!isElementInViewport(el, (nav == null ? void 0 : nav.offsetHeight) ?? 0)) {
    scrollToAndCenter(el, void 0, options.scrollToError);
  }
  function Form_shouldAutoFocus(userAgent) {
    if (typeof options.autoFocusOnError === "boolean")
      return options.autoFocusOnError;
    else
      return !/iPhone|iPad|iPod|Android/i.test(userAgent);
  }
  if (!Form_shouldAutoFocus(navigator.userAgent))
    return;
  let focusEl;
  focusEl = el;
  if (!["INPUT", "SELECT", "BUTTON", "TEXTAREA"].includes(focusEl.tagName)) {
    focusEl = focusEl.querySelector('input:not([type="hidden"]):not(.flatpickr-input), select, textarea');
  }
  if (focusEl) {
    try {
      focusEl.focus({ preventScroll: true });
      if (options.selectErrorText && focusEl.tagName == "INPUT") {
        focusEl.select();
      }
    } catch (err) {
    }
  }
};

// node_modules/sveltekit-superforms/dist/client/proxies.js
var defaultOptions = {
  trueStringValue: "true",
  dateFormat: "iso"
};
function booleanProxy(form, path, options) {
  return _stringProxy(form, path, "boolean", {
    ...defaultOptions,
    ...options
  });
}
function intProxy(form, path, options) {
  return _stringProxy(form, path, "int", {
    ...defaultOptions,
    ...options
  });
}
function numberProxy(form, path, options) {
  return _stringProxy(form, path, "number", {
    ...defaultOptions,
    ...options
  });
}
function dateProxy(form, path, options) {
  return _stringProxy(form, path, "date", {
    ...defaultOptions,
    dateFormat: (options == null ? void 0 : options.format) ?? "iso",
    empty: options == null ? void 0 : options.empty
  });
}
function stringProxy(form, path, options) {
  return _stringProxy(form, path, "string", {
    ...defaultOptions,
    ...options
  });
}
function _stringProxy(form, path, type, options) {
  function toValue(value) {
    if (!value && options.empty !== void 0) {
      return options.empty === "null" ? null : options.empty === "zero" ? 0 : void 0;
    }
    if (typeof value === "number") {
      value = value.toString();
    }
    if (typeof value !== "string") {
      value = "";
    }
    const stringValue = value;
    if (type == "string")
      return stringValue;
    else if (type == "boolean")
      return !!stringValue;
    else if (type == "date")
      return new Date(stringValue);
    const numberToConvert = options.delimiter ? stringValue.replace(options.delimiter, ".") : stringValue;
    let num;
    if (numberToConvert === "" && options.empty == "zero")
      num = 0;
    else if (type == "number")
      num = parseFloat(numberToConvert);
    else
      num = parseInt(numberToConvert, 10);
    return num;
  }
  const isSuper = isSuperForm(form, options);
  const realProxy = isSuper ? superFieldProxy(form, path, { taint: options.taint }) : fieldProxy(form, path);
  let updatedValue = null;
  let initialized = false;
  const proxy = derived(realProxy, (value) => {
    if (!initialized) {
      initialized = true;
      if (options.initiallyEmptyIfZero && !value)
        return "";
    }
    if (updatedValue !== null) {
      const current = updatedValue;
      updatedValue = null;
      return current;
    }
    if (value === void 0 || value === null)
      return "";
    if (type == "string") {
      return value;
    } else if (type == "int" || type == "number") {
      if (value === "") {
        realProxy.set(0, isSuper ? { taint: false } : void 0);
      }
      if (typeof value === "number" && isNaN(value))
        return "";
      return String(value);
    } else if (type == "date") {
      const date = value;
      if (isNaN(date))
        return "";
      switch (options.dateFormat) {
        case "iso":
          return date.toISOString();
        case "date":
          return date.toISOString().slice(0, 10);
        case "datetime":
          return date.toISOString().slice(0, 16);
        case "time":
          return date.toISOString().slice(11, 16);
        case "date-utc":
          return UTCDate(date);
        case "datetime-utc":
          return UTCDate(date) + "T" + UTCTime(date);
        case "time-utc":
          return UTCTime(date);
        case "date-local":
          return localDate(date);
        case "datetime-local":
          return localDate(date) + "T" + localTime(date);
        case "time-local":
          return localTime(date);
      }
    } else {
      return value ? options.trueStringValue : "";
    }
  });
  return {
    subscribe: proxy.subscribe,
    set(val) {
      updatedValue = val;
      const newValue = toValue(updatedValue);
      realProxy.set(newValue);
    },
    update(updater) {
      realProxy.update((f) => {
        updatedValue = updater(String(f));
        const newValue = toValue(updatedValue);
        return newValue;
      });
    }
  };
}
function arrayProxy(superForm2, path, options) {
  const formErrors = fieldProxy(superForm2.errors, `${path}`);
  const onlyFieldErrors = derived(formErrors, ($errors) => {
    const output = [];
    for (const key in $errors) {
      if (key == "_errors")
        continue;
      output[key] = $errors[key];
    }
    return output;
  });
  function updateArrayErrors(errors, value) {
    for (const key in errors) {
      if (key == "_errors")
        continue;
      errors[key] = void 0;
    }
    if (value !== void 0) {
      for (const key in value) {
        errors[key] = value[key];
      }
    }
    return errors;
  }
  const fieldErrors = {
    subscribe: onlyFieldErrors.subscribe,
    update(upd) {
      formErrors.update(($errors) => (
        // @ts-expect-error Type is correct
        updateArrayErrors($errors, upd($errors))
      ));
    },
    set(value) {
      formErrors.update(($errors) => updateArrayErrors($errors, value));
    }
  };
  const values = superFieldProxy(superForm2, path, options);
  let lastLength = Array.isArray(get_store_value(values)) ? get_store_value(values).length : 0;
  values.subscribe(($values) => {
    const currentLength = Array.isArray($values) ? $values.length : 0;
    if (currentLength < lastLength) {
      superForm2.errors.update(($errors) => {
        const node = pathExists($errors, splitPath(path));
        if (!node)
          return $errors;
        for (const key in node.value) {
          if (Number(key) < currentLength)
            continue;
          delete node.value[key];
        }
        return $errors;
      }, { force: true });
    }
    lastLength = currentLength;
  });
  return {
    path,
    values,
    errors: fieldProxy(superForm2.errors, `${path}._errors`),
    valueErrors: fieldErrors
  };
}
function formFieldProxy(superForm2, path, options) {
  const path2 = splitPath(path);
  const constraintsPath = path2.filter((p) => /\D/.test(String(p))).join(".");
  const taintedProxy = derived(superForm2.tainted, ($tainted) => {
    if (!$tainted)
      return $tainted;
    const taintedPath = traversePath($tainted, path2);
    return taintedPath ? taintedPath.value : void 0;
  });
  const tainted = {
    subscribe: taintedProxy.subscribe,
    update(upd) {
      superForm2.tainted.update(($tainted) => {
        if (!$tainted)
          $tainted = {};
        const output = traversePath($tainted, path2, (path3) => {
          if (!path3.value)
            path3.parent[path3.key] = {};
          return path3.parent[path3.key];
        });
        if (output)
          output.parent[output.key] = upd(output.value);
        return $tainted;
      });
    },
    set(value) {
      superForm2.tainted.update(($tainted) => {
        if (!$tainted)
          $tainted = {};
        const output = traversePath($tainted, path2, (path3) => {
          if (!path3.value)
            path3.parent[path3.key] = {};
          return path3.parent[path3.key];
        });
        if (output)
          output.parent[output.key] = value;
        return $tainted;
      });
    }
  };
  return {
    path,
    value: superFieldProxy(superForm2, path, options),
    errors: fieldProxy(superForm2.errors, path),
    constraints: fieldProxy(superForm2.constraints, constraintsPath),
    tainted
  };
}
function updateProxyField(obj, path, updater) {
  const output = traversePath(obj, path, ({ parent, key, value }) => {
    if (value === void 0)
      parent[key] = /\D/.test(key) ? {} : [];
    return parent[key];
  });
  if (output) {
    const newValue = updater(output.value);
    output.parent[output.key] = newValue;
  }
  return obj;
}
function superFieldProxy(superForm2, path, baseOptions) {
  const form = superForm2.form;
  const path2 = splitPath(path);
  const proxy = derived(form, ($form) => {
    const data = traversePath($form, path2);
    return data == null ? void 0 : data.value;
  });
  return {
    subscribe(...params) {
      const unsub = proxy.subscribe(...params);
      return () => unsub();
    },
    update(upd, options) {
      form.update((data) => updateProxyField(data, path2, upd), options ?? baseOptions);
    },
    set(value, options) {
      form.update((data) => updateProxyField(data, path2, () => value), options ?? baseOptions);
    }
  };
}
function isSuperForm(form, options) {
  const isSuperForm2 = "form" in form;
  if (!isSuperForm2 && (options == null ? void 0 : options.taint) !== void 0) {
    throw new SuperFormError("If options.taint is set, the whole superForm object must be used as a proxy.");
  }
  return isSuperForm2;
}
function fieldProxy(form, path, options) {
  const path2 = splitPath(path);
  if (isSuperForm(form, options)) {
    return superFieldProxy(form, path, options);
  }
  const proxy = derived(form, ($form) => {
    const data = traversePath($form, path2);
    return data == null ? void 0 : data.value;
  });
  return {
    subscribe(...params) {
      const unsub = proxy.subscribe(...params);
      return () => unsub();
    },
    update(upd) {
      form.update((data) => updateProxyField(data, path2, upd));
    },
    set(value) {
      form.update((data) => updateProxyField(data, path2, () => value));
    }
  };
}
function localDate(date) {
  return date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0");
}
function localTime(date) {
  return String(date.getHours()).padStart(2, "0") + ":" + String(date.getMinutes()).padStart(2, "0");
}
function UTCDate(date) {
  return date.getUTCFullYear() + "-" + String(date.getUTCMonth() + 1).padStart(2, "0") + "-" + String(date.getUTCDate()).padStart(2, "0");
}
function UTCTime(date) {
  return String(date.getUTCHours()).padStart(2, "0") + ":" + String(date.getUTCMinutes()).padStart(2, "0");
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
var formIds = /* @__PURE__ */ new WeakMap();
var initialForms = /* @__PURE__ */ new WeakMap();
var defaultOnError = (event) => {
  console.warn("Unhandled Superform error, use onError event to handle it:", event.result.error);
};
var defaultFormOptions = {
  applyAction: true,
  invalidateAll: true,
  resetForm: true,
  autoFocusOnError: "detect",
  scrollToError: "smooth",
  errorSelector: '[aria-invalid="true"],[data-invalid]',
  selectErrorText: false,
  stickyNavbar: void 0,
  taintedMessage: false,
  onSubmit: void 0,
  onResult: void 0,
  onUpdate: void 0,
  onUpdated: void 0,
  onError: defaultOnError,
  dataType: "form",
  validators: void 0,
  customValidity: false,
  clearOnSubmit: "errors-and-message",
  delayMs: 500,
  timeoutMs: 8e3,
  multipleSubmits: "prevent",
  SPA: void 0,
  validationMethod: "auto"
};
function multipleFormIdError(id) {
  return `Duplicate form id's found: "${id}". Multiple forms will receive the same data. Use the id option to differentiate between them, or if this is intended, set the warnings.duplicateId option to false in superForm to disable this warning. More information: https://superforms.rocks/concepts/multiple-forms`;
}
var legacyMode = false;
try {
  if (SUPERFORMS_LEGACY)
    legacyMode = true;
} catch {
}
function superForm(form, formOptions) {
  var _a;
  let initialForm;
  let options = formOptions ?? {};
  let initialValidator = void 0;
  {
    if (options.legacy ?? legacyMode) {
      if (options.resetForm === void 0)
        options.resetForm = false;
      if (options.taintedMessage === void 0)
        options.taintedMessage = true;
    }
    initialValidator = options.validators;
    options = {
      ...defaultFormOptions,
      ...options
    };
    if (options.SPA && options.validators === void 0) {
      console.warn("No validators set for superForm in SPA mode. Add a validation adapter to the validators option, or set it to false to disable this warning.");
    }
    if (!form) {
      throw new SuperFormError("No form data sent to superForm. Make sure the output from superValidate is used (usually data.form) and that it's not null or undefined. Alternatively, an object with default values for the form can also be used, but then constraints won't be available.");
    }
    if (Context_isValidationObject(form) === false) {
      form = {
        id: options.id ?? "",
        valid: false,
        posted: false,
        errors: {},
        data: form
      };
    }
    form = form;
    const _initialFormId = options.id ?? form.id;
    const _currentPage = get_store_value(page2);
    if (browser3 && ((_a = options.warnings) == null ? void 0 : _a.duplicateId) !== false) {
      if (!formIds.has(_currentPage)) {
        formIds.set(_currentPage, /* @__PURE__ */ new Set([_initialFormId]));
      } else {
        const currentForms = formIds.get(_currentPage);
        if (currentForms == null ? void 0 : currentForms.has(_initialFormId)) {
          console.warn(multipleFormIdError(_initialFormId));
        } else {
          currentForms == null ? void 0 : currentForms.add(_initialFormId);
        }
      }
    }
    if (!initialForms.has(form)) {
      initialForms.set(form, form);
    }
    initialForm = initialForms.get(form);
    if (typeof initialForm.valid !== "boolean") {
      throw new SuperFormError("A non-validation object was passed to superForm. It should be an object of type SuperValidated, usually returned from superValidate.");
    }
    if (!browser3 && _currentPage.form && typeof _currentPage.form === "object") {
      const postedData = _currentPage.form;
      for (const postedForm of Context_findValidationForms(postedData).reverse()) {
        if (postedForm.id == _initialFormId && !initialForms.has(postedForm)) {
          initialForms.set(postedData, postedData);
          const pageDataForm = form;
          form = postedForm;
          form.constraints = pageDataForm.constraints;
          form.shape = pageDataForm.shape;
          if (form.valid && options.resetForm && (options.resetForm === true || options.resetForm())) {
            form = clone(pageDataForm);
            form.message = clone(postedForm.message);
          }
          break;
        }
      }
    } else {
      form = clone(initialForm);
    }
    onDestroy(() => {
      var _a2;
      Unsubscriptions_unsubscribe();
      NextChange_clear();
      for (const events of Object.values(formEvents)) {
        events.length = 0;
      }
      (_a2 = formIds.get(_currentPage)) == null ? void 0 : _a2.delete(_initialFormId);
    });
    if (options.dataType !== "json") {
      const checkForNestedData = (key, value) => {
        if (!value || typeof value !== "object")
          return;
        if (Array.isArray(value)) {
          if (value.length > 0)
            checkForNestedData(key, value[0]);
        } else if (!(value instanceof Date) && !(value instanceof File) && (!browser3 || !(value instanceof FileList))) {
          throw new SuperFormError(`Object found in form field "${key}". Set the dataType option to "json" and add use:enhance to use nested data structures. More information: https://superforms.rocks/concepts/nested-data`);
        }
      };
      for (const [key, value] of Object.entries(form.data)) {
        checkForNestedData(key, value);
      }
    }
  }
  const __data = {
    formId: form.id,
    form: clone(form.data),
    constraints: form.constraints ?? {},
    posted: form.posted,
    errors: clone(form.errors),
    message: clone(form.message),
    tainted: void 0,
    valid: form.valid,
    submitting: false,
    shape: form.shape
  };
  const Data = __data;
  const FormId = writable(options.id ?? form.id);
  const Context = {};
  function Context_findValidationForms(data) {
    const forms = Object.values(data).filter((v) => Context_isValidationObject(v) !== false);
    return forms;
  }
  function Context_isValidationObject(object) {
    if (!object || typeof object !== "object")
      return false;
    if (!("valid" in object && "errors" in object && typeof object.valid === "boolean")) {
      return false;
    }
    return "id" in object && typeof object.id === "string" ? object.id : false;
  }
  const _formData = writable(form.data);
  const Form2 = {
    subscribe: _formData.subscribe,
    set: (value, options2 = {}) => {
      const newData = clone(value);
      Tainted_update(newData, options2.taint ?? true);
      return _formData.set(newData);
    },
    update: (updater, options2 = {}) => {
      return _formData.update((value) => {
        const newData = updater(value);
        Tainted_update(newData, options2.taint ?? true);
        return newData;
      });
    }
  };
  async function Form_validate(opts = {}) {
    const dataToValidate = opts.formData ?? Data.form;
    let errors = {};
    let status;
    const validator = opts.adapter ?? options.validators;
    if (typeof validator == "object") {
      if (validator != initialValidator && !("jsonSchema" in validator)) {
        throw new SuperFormError('Client validation adapter found in options.validators. A full adapter must be used when changing validators dynamically, for example "zod" instead of "zodClient".');
      }
      status = await validator.validate(dataToValidate);
      if (!status.success) {
        errors = mapErrors(status.issues, validator.shape ?? Data.shape ?? {});
      } else if (opts.recheckValidData !== false) {
        return Form_validate({ ...opts, recheckValidData: false });
      }
    } else {
      status = { success: true, data: {} };
    }
    const data = { ...Data.form, ...dataToValidate, ...status.success ? status.data : {} };
    return {
      valid: status.success,
      posted: false,
      errors,
      data,
      constraints: Data.constraints,
      message: void 0,
      id: Data.formId,
      shape: Data.shape
    };
  }
  function Form__changeEvent(event) {
    if (!options.onChange || !event.paths.length || event.type == "blur")
      return;
    let changeEvent;
    const paths = event.paths.map(mergePath);
    if (event.type && event.paths.length == 1 && event.formElement && event.target instanceof Element) {
      changeEvent = {
        path: paths[0],
        paths,
        formElement: event.formElement,
        target: event.target,
        set(path, value, options2) {
          fieldProxy({ form: Form2 }, path, options2).set(value);
        },
        get(path) {
          return get_store_value(fieldProxy(Form2, path));
        }
      };
    } else {
      changeEvent = {
        paths,
        target: void 0,
        set(path, value, options2) {
          fieldProxy({ form: Form2 }, path, options2).set(value);
        },
        get(path) {
          return get_store_value(fieldProxy(Form2, path));
        }
      };
    }
    options.onChange(changeEvent);
  }
  async function Form_clientValidation(event, force = false, adapter) {
    if (event) {
      if (options.validators == "clear") {
        Errors.update(($errors) => {
          setPaths($errors, event.paths, void 0);
          return $errors;
        });
      }
      setTimeout(() => Form__changeEvent(event));
    }
    if (!event || !options.validators || options.validators == "clear")
      return;
    if (!force) {
      if (options.validationMethod == "onsubmit" || options.validationMethod == "submit-only") {
        return;
      }
      if (options.validationMethod == "onblur" && event.type == "input")
        return;
      if (options.validationMethod == "oninput" && event.type == "blur")
        return;
    }
    const result = await Form_validate({ adapter });
    if (result.valid && (event.immediate || event.type != "input")) {
      Form2.set(result.data, { taint: "ignore" });
    }
    await tick();
    Form__displayNewErrors(result.errors, event, force);
    return result;
  }
  async function Form__displayNewErrors(errors, event, force) {
    const { type, immediate, multiple, paths } = event;
    const previous = Data.errors;
    const output = {};
    const validity = /* @__PURE__ */ new Map();
    const formElement = event.formElement ?? EnhancedForm;
    if (options.customValidity && formElement) {
      for (const path of event.paths) {
        const name = CSS.escape(mergePath(path));
        const el = formElement.querySelector(`[name="${name}"]`);
        if (el) {
          const message2 = "validationMessage" in el ? String(el.validationMessage) : "";
          validity.set(path.join(), { el, message: message2 });
          updateCustomValidity(el, void 0);
        }
      }
    }
    traversePaths(errors, (error) => {
      if (!Array.isArray(error.value))
        return;
      let joinedPath = error.path.join(".");
      if (joinedPath.endsWith("._errors")) {
        joinedPath = joinedPath.substring(0, -8);
      }
      function addError() {
        setPaths(output, [error.path], error.value);
        if (options.customValidity && isEventError && validity.has(joinedPath)) {
          const { el, message: message2 } = validity.get(joinedPath);
          if (message2 != error.value) {
            updateCustomValidity(el, error.value);
            validity.clear();
          }
        }
      }
      if (force)
        return addError();
      const isEventError = error.value && paths.map((path) => path.join(".")).some((path) => path.startsWith(joinedPath));
      if (isEventError && options.validationMethod == "oninput")
        return addError();
      if (immediate && !multiple && isEventError)
        return addError();
      if (multiple) {
        const errorPath = pathExists(get_store_value(Errors), error.path.slice(0, -1));
        if ((errorPath == null ? void 0 : errorPath.value) && typeof (errorPath == null ? void 0 : errorPath.value) == "object") {
          for (const errors2 of Object.values(errorPath.value)) {
            if (Array.isArray(errors2)) {
              return addError();
            }
          }
        }
      }
      const previousError = pathExists(previous, error.path);
      if (previousError && previousError.key in previousError.parent) {
        return addError();
      }
      const lastPath = error.path[error.path.length - 1];
      const isObjectError = lastPath == "_errors";
      if (isObjectError) {
        if (options.validationMethod == "oninput" || type == "blur" && Tainted_hasBeenTainted(mergePath(error.path.slice(0, -1)))) {
          return addError();
        }
      } else {
        if (type == "blur" && isEventError) {
          return addError();
        }
      }
    });
    Errors.set(output);
  }
  function Form_set(data, options2 = {}) {
    if (options2.keepFiles) {
      traversePaths(Data.form, (info) => {
        if ((!browser3 || !(info.parent instanceof FileList)) && (info.value instanceof File || browser3 && info.value instanceof FileList)) {
          const dataPath = pathExists(data, info.path);
          if (!dataPath || !(dataPath.key in dataPath.parent)) {
            setPaths(data, [info.path], info.value);
          }
        }
      });
    }
    return Form2.set(data, options2);
  }
  function Form_shouldReset(validForm, successActionResult) {
    return validForm && successActionResult && options.resetForm && (options.resetForm === true || options.resetForm());
  }
  async function Form_updateFromValidation(form2, successResult) {
    if (form2.valid && successResult && Form_shouldReset(form2.valid, successResult)) {
      Form_reset({ message: form2.message, posted: true });
    } else {
      rebind({
        form: form2,
        untaint: successResult,
        keepFiles: true,
        // Check if the form data should be used for updating, or if the invalidateAll load function should be used:
        skipFormData: options.invalidateAll == "force"
      });
    }
    if (formEvents.onUpdated.length) {
      await tick();
    }
    for (const event of formEvents.onUpdated) {
      event({ form: form2 });
    }
  }
  function Form_reset(opts = {}) {
    const resetData = clone(initialForm);
    resetData.data = { ...resetData.data, ...opts.data };
    if (opts.id !== void 0)
      resetData.id = opts.id;
    rebind({
      form: resetData,
      untaint: true,
      message: opts.message,
      keepFiles: false,
      posted: opts.posted
    });
  }
  async function Form_updateFromActionResult(result) {
    if (result.type == "error") {
      throw new SuperFormError(`ActionResult of type "${result.type}" cannot be passed to update function.`);
    }
    if (result.type == "redirect") {
      if (Form_shouldReset(true, true))
        Form_reset({ posted: true });
      return;
    }
    if (typeof result.data !== "object") {
      throw new SuperFormError("Non-object validation data returned from ActionResult.");
    }
    const forms = Context_findValidationForms(result.data);
    if (!forms.length) {
      throw new SuperFormError("No form data returned from ActionResult. Make sure you return { form } in the form actions.");
    }
    for (const newForm of forms) {
      if (newForm.id !== Data.formId)
        continue;
      await Form_updateFromValidation(newForm, result.status >= 200 && result.status < 300);
    }
  }
  const Message = writable(__data.message);
  const Constraints = writable(__data.constraints);
  const Posted = writable(__data.posted);
  const Shape = writable(__data.shape);
  const _errors = writable(form.errors);
  const Errors = {
    subscribe: _errors.subscribe,
    set(value, options2) {
      return _errors.set(updateErrors(value, Data.errors, options2 == null ? void 0 : options2.force));
    },
    update(updater, options2) {
      return _errors.update((value) => {
        return updateErrors(updater(value), Data.errors, options2 == null ? void 0 : options2.force);
      });
    },
    /**
     * To work with client-side validation, errors cannot be deleted but must
     * be set to undefined, to know where they existed before (tainted+error check in oninput)
     */
    clear: () => void 0
  };
  let NextChange = null;
  function NextChange_setHtmlEvent(event) {
    NextChange = event;
    setTimeout(() => {
      Form_clientValidation(NextChange);
    }, 0);
  }
  function NextChange_additionalEventInformation(event, immediate, multiple, formElement, target) {
    if (NextChange === null) {
      NextChange = { paths: [] };
    }
    NextChange.type = event;
    NextChange.immediate = immediate;
    NextChange.multiple = multiple;
    NextChange.formElement = formElement;
    NextChange.target = target;
  }
  function NextChange_paths() {
    return (NextChange == null ? void 0 : NextChange.paths) ?? [];
  }
  function NextChange_clear() {
    NextChange = null;
  }
  const Tainted = {
    state: writable(),
    message: options.taintedMessage,
    clean: clone(form.data)
    // Important to clone form.data, so it's not comparing the same object,
  };
  function Tainted_enable() {
    options.taintedMessage = Tainted.message;
  }
  function Tainted_currentState() {
    return Tainted.state;
  }
  function Tainted_hasBeenTainted(path) {
    if (!Data.tainted)
      return false;
    if (!path)
      return !!Data.tainted;
    const field = pathExists(Data.tainted, splitPath(path));
    return !!field && field.key in field.parent;
  }
  function Tainted_isTainted(path) {
    if (typeof path === "boolean")
      return path;
    if (typeof path === "object")
      return Tainted__isObjectTainted(path);
    if (!Data.tainted)
      return false;
    if (!path)
      return Tainted__isObjectTainted(Data.tainted);
    const field = pathExists(Data.tainted, splitPath(path));
    return Tainted__isObjectTainted(field == null ? void 0 : field.value);
  }
  function Tainted__isObjectTainted(obj) {
    if (!obj)
      return false;
    if (typeof obj === "object") {
      for (const obj2 of Object.values(obj)) {
        if (Tainted__isObjectTainted(obj2))
          return true;
      }
    }
    return obj === true;
  }
  function Tainted_update(newData, taintOptions) {
    if (taintOptions == "ignore")
      return;
    const paths = comparePaths(newData, Data.form);
    if (paths.length) {
      if (taintOptions == "untaint-all" || taintOptions == "untaint-form") {
        Tainted.state.set(void 0);
      } else {
        Tainted.state.update((tainted) => {
          if (!tainted)
            tainted = {};
          setPaths(tainted, paths, (path, data) => {
            const currentValue = traversePath(newData, path);
            const cleanPath = traversePath(Tainted.clean, path);
            return currentValue && cleanPath && currentValue.value === cleanPath.value ? void 0 : taintOptions === true ? true : taintOptions === "untaint" ? void 0 : data.value;
          });
          return tainted;
        });
      }
    }
    NextChange_setHtmlEvent({ paths });
  }
  function Tainted_set(tainted, newClean) {
    Tainted.state.set(tainted);
    if (newClean)
      Tainted.clean = newClean;
  }
  const Submitting = writable(false);
  const Delayed = writable(false);
  const Timeout = writable(false);
  const Unsubscriptions = [
    // eslint-disable-next-line dci-lint/private-role-access
    Tainted.state.subscribe((tainted) => __data.tainted = clone(tainted)),
    // eslint-disable-next-line dci-lint/private-role-access
    Form2.subscribe((form2) => __data.form = clone(form2)),
    // eslint-disable-next-line dci-lint/private-role-access
    Errors.subscribe((errors) => __data.errors = clone(errors)),
    FormId.subscribe((id) => __data.formId = id),
    Constraints.subscribe((constraints2) => __data.constraints = constraints2),
    Posted.subscribe((posted) => __data.posted = posted),
    Message.subscribe((message2) => __data.message = message2),
    Submitting.subscribe((submitting) => __data.submitting = submitting),
    Shape.subscribe((shape) => __data.shape = shape)
  ];
  function Unsubscriptions_add(func) {
    Unsubscriptions.push(func);
  }
  function Unsubscriptions_unsubscribe() {
    Unsubscriptions.forEach((unsub) => unsub());
  }
  const AllErrors = derived(Errors, ($errors) => $errors ? flattenErrors($errors) : []);
  let EnhancedForm;
  options.taintedMessage = void 0;
  function rebind(opts) {
    const form2 = opts.form;
    const message2 = opts.message ?? form2.message;
    if (opts.untaint) {
      Tainted_set(typeof opts.untaint === "boolean" ? void 0 : opts.untaint, form2.data);
    }
    if (opts.skipFormData !== true) {
      Form_set(form2.data, {
        taint: "ignore",
        keepFiles: opts.keepFiles
      });
    }
    Message.set(message2);
    Errors.set(form2.errors);
    FormId.set(form2.id);
    Posted.set(opts.posted ?? form2.posted);
    if (form2.constraints)
      Constraints.set(form2.constraints);
    if (form2.shape)
      Shape.set(form2.shape);
    __data.valid = form2.valid;
    if (options.flashMessage && shouldSyncFlash(options)) {
      const flash = options.flashMessage.module.getFlash(page2);
      if (message2 && get_store_value(flash) === void 0) {
        flash.set(message2);
      }
    }
  }
  const formEvents = {
    onSubmit: options.onSubmit ? [options.onSubmit] : [],
    onResult: options.onResult ? [options.onResult] : [],
    onUpdate: options.onUpdate ? [options.onUpdate] : [],
    onUpdated: options.onUpdated ? [options.onUpdated] : [],
    onError: options.onError ? [options.onError] : []
  };
  if (browser3) {
    const defaultMessage = "Leave page? Changes that you made may not be saved.";
    let forceRedirection = false;
    beforeNavigate(async (nav) => {
      if (options.taintedMessage && !Data.submitting && !forceRedirection) {
        if (Tainted_isTainted()) {
          const { taintedMessage } = options;
          nav.cancel();
          if (nav.type === "leave")
            return;
          const isTaintedFunction = typeof taintedMessage === "function";
          const message2 = isTaintedFunction || taintedMessage === true ? defaultMessage : taintedMessage;
          const confirmFunction = isTaintedFunction ? taintedMessage : () => window.confirm(message2);
          let shouldRedirect;
          try {
            shouldRedirect = await confirmFunction();
          } catch {
            shouldRedirect = false;
          }
          if (shouldRedirect && nav.to) {
            try {
              forceRedirection = true;
              await goto(nav.to.url, { ...nav.to.params });
              return;
            } finally {
              forceRedirection = false;
            }
          }
        }
      }
    });
    Unsubscriptions_add(page2.subscribe(async (pageUpdate) => {
      const successResult = pageUpdate.status >= 200 && pageUpdate.status < 300;
      if (options.applyAction && pageUpdate.form && typeof pageUpdate.form === "object") {
        const actionData = pageUpdate.form;
        if (actionData.type == "error")
          return;
        for (const newForm of Context_findValidationForms(actionData)) {
          const isInitial = initialForms.has(newForm);
          if (newForm.id !== Data.formId || isInitial) {
            continue;
          }
          initialForms.set(newForm, newForm);
          await Form_updateFromValidation(newForm, successResult);
        }
      } else if (pageUpdate.data && typeof pageUpdate.data === "object") {
        for (const newForm of Context_findValidationForms(pageUpdate.data)) {
          const isInitial = initialForms.has(newForm);
          if (newForm.id !== Data.formId || isInitial) {
            continue;
          }
          if (options.invalidateAll === "force") {
            initialForm.data = newForm.data;
          }
          rebind({
            form: newForm,
            untaint: successResult,
            keepFiles: true
          });
        }
      }
    }));
  }
  return {
    form: Form2,
    formId: FormId,
    errors: Errors,
    message: Message,
    constraints: Constraints,
    tainted: Tainted_currentState(),
    submitting: readonly(Submitting),
    delayed: readonly(Delayed),
    timeout: readonly(Timeout),
    options,
    capture() {
      return {
        valid: Data.valid,
        posted: Data.posted,
        errors: Data.errors,
        data: Data.form,
        constraints: Data.constraints,
        message: Data.message,
        id: Data.formId,
        tainted: Data.tainted,
        shape: Data.shape
      };
    },
    restore: (snapshot) => {
      rebind({ form: snapshot, untaint: snapshot.tainted ?? true });
    },
    async validate(path, opts = {}) {
      if (!options.validators) {
        throw new SuperFormError("options.validators must be set to use the validate method.");
      }
      if (opts.update === void 0)
        opts.update = true;
      if (opts.taint === void 0)
        opts.taint = false;
      if (typeof opts.errors == "string")
        opts.errors = [opts.errors];
      let data;
      const splittedPath = splitPath(path);
      if ("value" in opts) {
        if (opts.update === true || opts.update === "value") {
          Form2.update(($form) => {
            setPaths($form, [splittedPath], opts.value);
            return $form;
          }, { taint: opts.taint });
          data = Data.form;
        } else {
          data = clone(Data.form);
          setPaths(data, [splittedPath], opts.value);
        }
      } else {
        data = Data.form;
      }
      const result = await Form_validate({ formData: data });
      const error = pathExists(result.errors, splittedPath);
      if (error && error.value && opts.errors) {
        error.value = opts.errors;
      }
      if (opts.update === true || opts.update == "errors") {
        Errors.update(($errors) => {
          setPaths($errors, [splittedPath], error == null ? void 0 : error.value);
          return $errors;
        });
      }
      return error == null ? void 0 : error.value;
    },
    async validateForm(opts = {}) {
      if (!options.validators && !opts.schema) {
        throw new SuperFormError("options.validators or the schema option must be set to use the validateForm method.");
      }
      const result = opts.update ? await Form_clientValidation({ paths: [] }, true, opts.schema) : Form_validate({ adapter: opts.schema });
      if (opts.update && EnhancedForm) {
        setTimeout(() => {
          if (EnhancedForm)
            scrollToFirstError(EnhancedForm, {
              ...options,
              scrollToError: opts.focusOnError === false ? "off" : options.scrollToError
            });
        }, 1);
      }
      return result || Form_validate({ adapter: opts.schema });
    },
    allErrors: AllErrors,
    posted: Posted,
    reset(options2) {
      return Form_reset({
        message: (options2 == null ? void 0 : options2.keepMessage) ? Data.message : void 0,
        data: options2 == null ? void 0 : options2.data,
        id: options2 == null ? void 0 : options2.id
      });
    },
    submit(submitter) {
      const form2 = EnhancedForm ? EnhancedForm : submitter ? submitter.closest("form") : void 0;
      if (!form2) {
        throw new SuperFormError("use:enhance must be added to the form to use submit, or pass a HTMLElement inside the form (or the form itself) as an argument.");
      }
      const isSubmitButton = submitter && (submitter instanceof HTMLButtonElement && submitter.type == "submit" || submitter instanceof HTMLInputElement && ["submit", "image"].includes(submitter.type));
      form2.requestSubmit(isSubmitButton ? submitter : void 0);
    },
    isTainted: Tainted_isTainted,
    ///// Custom use:enhance ////////////////////////////////////////
    // @DCI-context
    enhance(FormElement, events) {
      EnhancedForm = FormElement;
      if (events) {
        if (events.onError) {
          if (options.onError === "apply") {
            throw new SuperFormError('options.onError is set to "apply", cannot add any onError events.');
          } else if (events.onError === "apply") {
            throw new SuperFormError('Cannot add "apply" as onError event in use:enhance.');
          }
          formEvents.onError.push(events.onError);
        }
        if (events.onResult)
          formEvents.onResult.push(events.onResult);
        if (events.onSubmit)
          formEvents.onSubmit.push(events.onSubmit);
        if (events.onUpdate)
          formEvents.onUpdate.push(events.onUpdate);
        if (events.onUpdated)
          formEvents.onUpdated.push(events.onUpdated);
      }
      Tainted_enable();
      let lastInputChange;
      async function onInput(e) {
        const info = inputInfo(e.target);
        if (info.immediate && !info.file)
          await new Promise((r) => setTimeout(r, 0));
        lastInputChange = NextChange_paths();
        NextChange_additionalEventInformation("input", info.immediate, info.multiple, FormElement, e.target ?? void 0);
      }
      async function onBlur(e) {
        if (Data.submitting)
          return;
        if (!lastInputChange || NextChange_paths() != lastInputChange) {
          return;
        }
        const info = inputInfo(e.target);
        if (info.immediate && !info.file)
          await new Promise((r) => setTimeout(r, 0));
        Form_clientValidation({
          paths: lastInputChange,
          immediate: info.multiple,
          multiple: info.multiple,
          type: "blur",
          formElement: FormElement,
          target: e.target ?? void 0
        });
        lastInputChange = void 0;
      }
      FormElement.addEventListener("focusout", onBlur);
      FormElement.addEventListener("input", onInput);
      onDestroy(() => {
        FormElement.removeEventListener("focusout", onBlur);
        FormElement.removeEventListener("input", onInput);
        EnhancedForm = void 0;
      });
      const htmlForm = Form(FormElement, { submitting: Submitting, delayed: Delayed, timeout: Timeout }, options);
      let currentRequest;
      return enhance(FormElement, async (submitParams) => {
        var _a2, _b;
        let jsonData = void 0;
        let validationAdapter = options.validators;
        const submit = {
          ...submitParams,
          jsonData(data) {
            if (options.dataType !== "json") {
              throw new SuperFormError("options.dataType must be set to 'json' to use jsonData.");
            }
            jsonData = data;
          },
          validators(adapter) {
            validationAdapter = adapter;
          }
        };
        const _submitCancel = submit.cancel;
        let cancelled = false;
        function cancel(resetTimers = true) {
          cancelled = true;
          if (resetTimers && htmlForm.isSubmitting()) {
            htmlForm.completed({ cancelled });
          }
          return _submitCancel();
        }
        submit.cancel = cancel;
        if (htmlForm.isSubmitting() && options.multipleSubmits == "prevent") {
          cancel(false);
        } else {
          if (htmlForm.isSubmitting() && options.multipleSubmits == "abort") {
            if (currentRequest)
              currentRequest.abort();
          }
          htmlForm.submitting();
          currentRequest = submit.controller;
          for (const event of formEvents.onSubmit) {
            await event(submit);
          }
        }
        if (cancelled) {
          if (options.flashMessage)
            cancelFlash(options);
        } else {
          const noValidate = !options.SPA && (FormElement.noValidate || (submit.submitter instanceof HTMLButtonElement || submit.submitter instanceof HTMLInputElement) && submit.submitter.formNoValidate);
          let validation = void 0;
          const validateForm = async () => {
            return await Form_validate({ adapter: validationAdapter });
          };
          if (!noValidate) {
            validation = await validateForm();
            if (!validation.valid) {
              cancel(false);
              const result = {
                type: "failure",
                status: (typeof options.SPA === "boolean" ? void 0 : (_a2 = options.SPA) == null ? void 0 : _a2.failStatus) ?? 400,
                data: { form: validation }
              };
              setTimeout(() => validationResponse({ result }), 0);
            }
          }
          if (!cancelled) {
            switch (options.clearOnSubmit) {
              case "errors-and-message":
                Errors.clear();
                Message.set(void 0);
                break;
              case "errors":
                Errors.clear();
                break;
              case "message":
                Message.set(void 0);
                break;
            }
            if (options.flashMessage && (options.clearOnSubmit == "errors-and-message" || options.clearOnSubmit == "message") && shouldSyncFlash(options)) {
              options.flashMessage.module.getFlash(page2).set(void 0);
            }
            const submitData = "formData" in submit ? submit.formData : submit.data;
            lastInputChange = void 0;
            if (options.SPA) {
              cancel(false);
              if (!validation)
                validation = await validateForm();
              const validationResult = { ...validation, posted: true };
              const result = {
                type: validationResult.valid ? "success" : "failure",
                status: validationResult.valid ? 200 : typeof options.SPA == "object" ? (_b = options.SPA) == null ? void 0 : _b.failStatus : 400,
                data: { form: validationResult }
              };
              setTimeout(() => validationResponse({ result }), 0);
            } else if (options.dataType === "json") {
              if (!validation)
                validation = await validateForm();
              const postData = clone(jsonData ?? validation.data);
              traversePaths(postData, (data) => {
                if (data.value instanceof File) {
                  const key = "__superform_file_" + mergePath(data.path);
                  submitData.append(key, data.value);
                  return data.set(void 0);
                } else if (Array.isArray(data.value) && data.value.length && data.value.every((v) => v instanceof File)) {
                  const key = "__superform_files_" + mergePath(data.path);
                  for (const file2 of data.value) {
                    submitData.append(key, file2);
                  }
                  return data.set(void 0);
                }
              });
              Object.keys(postData).forEach((key) => {
                if (typeof submitData.get(key) === "string") {
                  submitData.delete(key);
                }
              });
              const chunks = chunkSubstr(stringify(postData), options.jsonChunkSize ?? 5e5);
              for (const chunk of chunks) {
                submitData.append("__superform_json", chunk);
              }
            }
            if (!options.SPA && !submitData.has("__superform_id")) {
              const id = Data.formId;
              if (id !== void 0)
                submitData.set("__superform_id", id);
            }
          }
        }
        function chunkSubstr(str, size) {
          const numChunks = Math.ceil(str.length / size);
          const chunks = new Array(numChunks);
          for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
            chunks[i] = str.substring(o, o + size);
          }
          return chunks;
        }
        async function validationResponse(event) {
          var _a3;
          const result = event.result.type ? event.result : {
            type: "error",
            status: 500,
            error: event.result
          };
          currentRequest = null;
          let cancelled2 = false;
          const cancel2 = () => cancelled2 = true;
          const data = {
            result,
            formEl: FormElement,
            formElement: FormElement,
            cancel: cancel2
          };
          const unsubCheckforNav = navigating.subscribe(($nav) => {
            var _a4, _b2;
            if (!$nav || ((_a4 = $nav.from) == null ? void 0 : _a4.route.id) === ((_b2 = $nav.to) == null ? void 0 : _b2.route.id))
              return;
            cancel2();
          });
          for (const event2 of formEvents.onResult) {
            await event2(data);
          }
          if (!cancelled2) {
            if ((result.type === "success" || result.type == "failure") && result.data) {
              const forms = Context_findValidationForms(result.data);
              if (!forms.length) {
                throw new SuperFormError("No form data returned from ActionResult. Make sure you return { form } in the form actions.");
              }
              for (const newForm of forms) {
                if (newForm.id !== Data.formId)
                  continue;
                const data2 = {
                  form: newForm,
                  formEl: FormElement,
                  formElement: FormElement,
                  cancel: () => cancelled2 = true
                };
                for (const event2 of formEvents.onUpdate) {
                  await event2(data2);
                }
                if (!cancelled2) {
                  if (options.customValidity) {
                    setCustomValidityForm(FormElement, data2.form.errors);
                  }
                  if (Form_shouldReset(data2.form.valid, result.type == "success")) {
                    data2.formElement.querySelectorAll('input[type="file"]').forEach((e) => e.value = "");
                  }
                }
              }
            }
            if (!cancelled2) {
              if (result.type !== "error") {
                if (result.type === "success" && options.invalidateAll) {
                  await invalidateAll();
                }
                if (options.applyAction) {
                  await applyAction(result);
                } else {
                  await Form_updateFromActionResult(result);
                }
              } else {
                if (options.applyAction) {
                  if (options.onError == "apply") {
                    await applyAction(result);
                  } else {
                    const failResult = {
                      type: "failure",
                      status: Math.floor(result.status || 500),
                      data: result
                    };
                    await applyAction(failResult);
                  }
                }
                if (options.onError !== "apply") {
                  const data2 = { result, message: Message };
                  for (const onErrorEvent of formEvents.onError) {
                    if (onErrorEvent !== "apply" && (onErrorEvent != defaultOnError || !((_a3 = options.flashMessage) == null ? void 0 : _a3.onError))) {
                      await onErrorEvent(data2);
                    }
                  }
                }
              }
              if (options.flashMessage) {
                if (result.type == "error" && options.flashMessage.onError) {
                  await options.flashMessage.onError({
                    result,
                    flashMessage: options.flashMessage.module.getFlash(page2)
                  });
                }
              }
            }
          }
          if (cancelled2 && options.flashMessage) {
            cancelFlash(options);
          }
          if (cancelled2 || result.type != "redirect") {
            htmlForm.completed({ cancelled: cancelled2 });
          } else {
            const unsub = navigating.subscribe(($nav) => {
              if ($nav)
                return;
              setTimeout(() => {
                try {
                  if (unsub)
                    unsub();
                } catch {
                }
              });
              if (htmlForm.isSubmitting()) {
                htmlForm.completed({ cancelled: cancelled2, clearAll: true });
              }
            });
          }
          unsubCheckforNav();
        }
        return validationResponse;
      });
    }
  };
}

// node_modules/sveltekit-superforms/dist/defaults.js
function defaults(data, adapter, options) {
  if (data && "superFormValidationLibrary" in data) {
    options = adapter;
    adapter = data;
    data = null;
  }
  const validator = adapter;
  const optionDefaults = (options == null ? void 0 : options.defaults) ?? validator.defaults;
  return {
    id: (options == null ? void 0 : options.id) ?? validator.id ?? "",
    valid: false,
    posted: false,
    errors: {},
    data: { ...optionDefaults, ...data },
    constraints: validator.constraints,
    shape: validator.shape
  };
}
function defaultValues2(adapter) {
  return adapter.defaults;
}

// node_modules/sveltekit-superforms/dist/actionResult.js
import { json } from "@sveltejs/kit";
function actionResult(type, data, options) {
  function cookieData() {
    var _a, _b, _c, _d;
    if (typeof options === "number" || !(options == null ? void 0 : options.message))
      return "";
    const extra = [
      `Path=${((_a = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _a.path) || "/"}`,
      `Max-Age=${((_b = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _b.maxAge) || 120}`,
      `SameSite=${((_c = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _c.sameSite) ?? "Strict"}`
    ];
    if ((_d = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _d.secure) {
      extra.push(`Secure`);
    }
    return `flash=${encodeURIComponent(JSON.stringify(options.message))}; ` + extra.join("; ");
  }
  const status = options && typeof options !== "number" ? options.status : options;
  const result = (struct) => {
    return json({ type, ...struct }, {
      status: struct.status,
      headers: typeof options === "object" && options.message ? {
        "Set-Cookie": cookieData()
      } : void 0
    });
  };
  if (type == "error") {
    return result({
      status: status || 500,
      error: typeof data === "string" ? { message: data } : data
    });
  } else if (type == "redirect") {
    return result({
      status: status || 303,
      location: data
    });
  } else if (type == "failure") {
    return result({
      status: status || 400,
      data: stringify(data)
    });
  } else {
    return result({ status: status || 200, data: stringify(data) });
  }
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaShape.js
function schemaShape(schema, path = []) {
  const output = _schemaShape(schema, path);
  if (!output)
    throw new SchemaError("No shape could be created for schema.", path);
  return output;
}
function _schemaShape(schema, path) {
  assertSchema(schema, path);
  const info = schemaInfo(schema, false, path);
  if (info.array || info.union) {
    const arr = info.array || [];
    const union = info.union || [];
    return arr.concat(union).reduce((shape, next) => {
      const nextShape = _schemaShape(next, path);
      if (nextShape)
        shape = { ...shape ?? {}, ...nextShape };
      return shape;
    }, arr.length ? {} : void 0);
  }
  if (info.properties) {
    const output = {};
    for (const [key, prop] of Object.entries(info.properties)) {
      const shape = _schemaShape(prop, [...path, key]);
      if (shape)
        output[key] = shape;
    }
    return output;
  }
  return info.types.includes("array") || info.types.includes("object") ? {} : void 0;
}

// node_modules/sveltekit-superforms/dist/superValidate.js
import { fail } from "@sveltejs/kit";

// node_modules/sveltekit-superforms/dist/jsonSchema/constraints.js
function constraints(schema) {
  return _constraints(schemaInfo(schema, false, []), []);
}
function merge2(constraints2) {
  let output = {};
  for (const constraint2 of constraints2) {
    if (!constraint2)
      continue;
    output = { ...output, ...constraint2 };
  }
  return output;
}
function _constraints(info, path) {
  var _a;
  if (!info)
    return void 0;
  if (info.union) {
    const infos = info.union.map((s) => schemaInfo(s, info.isOptional, path));
    const merged = infos.map((i) => _constraints(i, path));
    const output = merge2(merged);
    if (output && (info.isNullable || info.isOptional || infos.some((i) => (i == null ? void 0 : i.isNullable) || (i == null ? void 0 : i.isOptional)))) {
      delete output.required;
    }
    return output && Object.values(output).length ? output : void 0;
  }
  if (info.array) {
    if (info.array.length == 1) {
      return _constraints(schemaInfo(info.array[0], info.isOptional, path), path);
    }
    return merge2(info.array.map((i) => _constraints(schemaInfo(i, info.isOptional, path), path)));
  }
  if (info.properties) {
    const output = {};
    for (const [key, prop] of Object.entries(info.properties)) {
      const propInfo = schemaInfo(prop, !((_a = info.required) == null ? void 0 : _a.includes(key)) || prop.default !== void 0, [key]);
      const propConstraint = _constraints(propInfo, [...path, key]);
      if (typeof propConstraint === "object" && Object.values(propConstraint).length > 0) {
        output[key] = propConstraint;
      }
    }
    return output;
  }
  return constraint(info);
}
function constraint(info) {
  const output = {};
  const schema = info.schema;
  const type = schema.type;
  const format = schema.format;
  if (type == "integer" && format == "unix-time") {
    const date = schema;
    if (date.minimum !== void 0)
      output.min = new Date(date.minimum).toISOString();
    if (date.maximum !== void 0)
      output.max = new Date(date.maximum).toISOString();
  } else if (type == "string") {
    const str = schema;
    const patterns = [
      str.pattern,
      ...str.allOf ? str.allOf.map((s) => typeof s == "boolean" ? void 0 : s.pattern) : []
    ].filter((s) => s !== void 0);
    if (patterns.length > 0)
      output.pattern = patterns[0];
    if (str.minLength !== void 0)
      output.minlength = str.minLength;
    if (str.maxLength !== void 0)
      output.maxlength = str.maxLength;
  } else if (type == "number" || type == "integer") {
    const num = schema;
    if (num.minimum !== void 0)
      output.min = num.minimum;
    else if (num.exclusiveMinimum !== void 0)
      output.min = num.exclusiveMinimum + (type == "integer" ? 1 : Number.MIN_VALUE);
    if (num.maximum !== void 0)
      output.max = num.maximum;
    else if (num.exclusiveMaximum !== void 0)
      output.max = num.exclusiveMaximum - (type == "integer" ? 1 : Number.MIN_VALUE);
    if (num.multipleOf !== void 0)
      output.step = num.multipleOf;
  } else if (type == "array") {
    const arr = schema;
    if (arr.minItems !== void 0)
      output.min = arr.minItems;
    if (arr.maxItems !== void 0)
      output.max = arr.maxItems;
  }
  if (!info.isNullable && !info.isOptional) {
    output.required = true;
  }
  return Object.keys(output).length > 0 ? output : void 0;
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaHash.js
function schemaHash(schema) {
  return hashCode(_schemaHash(schemaInfo(schema, false, []), 0, []));
}
function _schemaHash(info, depth, path) {
  var _a;
  if (!info)
    return "";
  function tab() {
    return "  ".repeat(depth);
  }
  function mapSchemas(schemas) {
    return schemas.map((s) => _schemaHash(schemaInfo(s, (info == null ? void 0 : info.isOptional) ?? false, path), depth + 1, path)).filter((s) => s).join("|");
  }
  function nullish() {
    const output = [];
    if (info == null ? void 0 : info.isNullable)
      output.push("null");
    if (info == null ? void 0 : info.isOptional)
      output.push("undefined");
    return !output.length ? "" : "|" + output.join("|");
  }
  if (info.union) {
    return "Union {\n  " + tab() + mapSchemas(info.union) + "\n" + tab() + "}" + nullish();
  }
  if (info.properties) {
    const output = [];
    for (const [key, prop] of Object.entries(info.properties)) {
      const propInfo = schemaInfo(prop, !((_a = info.required) == null ? void 0 : _a.includes(key)) || prop.default !== void 0, [key]);
      output.push(key + ": " + _schemaHash(propInfo, depth + 1, path));
    }
    return "Object {\n  " + tab() + output.join(",\n  ") + "\n" + tab() + "}" + nullish();
  }
  if (info.array) {
    return "Array[" + mapSchemas(info.array) + "]" + nullish();
  }
  return info.types.join("|") + nullish();
}
function hashCode(str) {
  let hash = 0;
  for (let i = 0, len = str.length; i < len; i++) {
    const chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  if (hash < 0)
    hash = hash >>> 0;
  return hash.toString(36);
}

// node_modules/sveltekit-superforms/dist/adapters/simple-schema/index.js
function simpleSchema(value) {
  if (value === null || value === void 0) {
    return {};
  }
  switch (typeof value) {
    case "object": {
      if (value instanceof Date) {
        return { type: "integer", format: "unix-time" };
      }
      const output = { type: "array" };
      if (Array.isArray(value)) {
        if (value.length)
          output.items = simpleSchema(value[0]);
        return output;
      } else {
        const obj = value;
        return {
          type: "object",
          properties: Object.fromEntries(Object.entries(obj).map(([key, value2]) => [key, simpleSchema(value2)])),
          required: Object.keys(obj).filter((key) => !obj[key] && obj[key] !== void 0 && obj[key] !== null || Array.isArray(obj[key]) && !obj[key].length),
          additionalProperties: false
        };
      }
    }
  }
  return { type: typeof value };
}

// node_modules/sveltekit-superforms/dist/adapters/adapters.js
function createJsonSchema(options, transformer) {
  return "jsonSchema" in options && options.jsonSchema ? options.jsonSchema : !transformer && "defaults" in options && options.defaults ? simpleSchema(options.defaults) : transformer ? transformer() : () => {
    throw new SuperFormError('The "defaults" option is required for this adapter.');
  };
}
function createAdapter(adapter, jsonSchema) {
  if (!adapter || !("superFormValidationLibrary" in adapter)) {
    throw new SuperFormError('Superforms v2 requires a validation adapter for the schema. Import one of your choice from "sveltekit-superforms/adapters" and wrap the schema with it.');
  }
  if (!jsonSchema)
    jsonSchema = adapter.jsonSchema;
  return {
    ...adapter,
    constraints: adapter.constraints ?? constraints(jsonSchema),
    defaults: adapter.defaults ?? defaultValues(jsonSchema),
    shape: schemaShape(jsonSchema),
    id: schemaHash(jsonSchema)
  };
}

// node_modules/sveltekit-superforms/dist/formData.js
var legacyMode2 = false;
try {
  if (SUPERFORMS_LEGACY)
    legacyMode2 = true;
} catch {
}
var unionError = 'FormData parsing failed: Unions are only supported when the dataType option for superForm is set to "json".';
async function parseRequest(data, schemaData, options) {
  let parsed;
  if (data instanceof FormData) {
    parsed = parseFormData(data, schemaData, options);
  } else if (data instanceof URL || data instanceof URLSearchParams) {
    parsed = parseSearchParams(data, schemaData, options);
  } else if (data instanceof Request) {
    parsed = await tryParseFormData(data, schemaData, options);
  } else if (
    // RequestEvent
    data && typeof data === "object" && "request" in data && data.request instanceof Request
  ) {
    parsed = await tryParseFormData(data.request, schemaData, options);
  } else {
    parsed = {
      id: void 0,
      data,
      posted: false
    };
  }
  return parsed;
}
async function tryParseFormData(request, schemaData, options) {
  let formData = void 0;
  try {
    formData = await request.formData();
  } catch (e) {
    if (e instanceof TypeError && e.message.includes("already been consumed")) {
      throw e;
    }
    return { id: void 0, data: void 0, posted: false };
  }
  return parseFormData(formData, schemaData, options);
}
function parseSearchParams(data, schemaData, options) {
  if (data instanceof URL)
    data = data.searchParams;
  const convert = new FormData();
  for (const [key, value] of data.entries()) {
    convert.append(key, value);
  }
  const output = parseFormData(convert, schemaData, options);
  output.posted = false;
  return output;
}
function parseFormData(formData, schemaData, options) {
  var _a;
  function tryParseSuperJson() {
    if (formData.has("__superform_json")) {
      try {
        const output = parse(formData.getAll("__superform_json").join("") ?? "");
        if (typeof output === "object") {
          const filePaths = Array.from(formData.keys());
          for (const path of filePaths.filter((path2) => path2.startsWith("__superform_file_"))) {
            const realPath = splitPath(path.substring(17));
            setPaths(output, [realPath], formData.get(path));
          }
          for (const path of filePaths.filter((path2) => path2.startsWith("__superform_files_"))) {
            const realPath = splitPath(path.substring(18));
            const allFiles = formData.getAll(path);
            setPaths(output, [realPath], Array.from(allFiles));
          }
          return output;
        }
      } catch {
      }
    }
    return null;
  }
  const data = tryParseSuperJson();
  const id = (_a = formData.get("__superform_id")) == null ? void 0 : _a.toString();
  return data ? { id, data, posted: true } : {
    id,
    data: _parseFormData(formData, schemaData, options),
    posted: true
  };
}
function _parseFormData(formData, schema, options) {
  var _a;
  const output = {};
  const schemaKeys = (options == null ? void 0 : options.strict) ? new Set([...formData.keys()].filter((key) => !key.startsWith("__superform_"))) : new Set([
    ...Object.keys(schema.properties ?? {}),
    ...schema.additionalProperties ? formData.keys() : []
  ].filter((key) => !key.startsWith("__superform_")));
  function parseSingleEntry(key, entry, info) {
    if ((options == null ? void 0 : options.preprocessed) && options.preprocessed.includes(key)) {
      return entry;
    }
    if (entry && typeof entry !== "string") {
      const allowFiles = legacyMode2 ? (options == null ? void 0 : options.allowFiles) === true : (options == null ? void 0 : options.allowFiles) !== false;
      return allowFiles && entry.size ? entry : void 0;
    }
    if (info.types.length > 1) {
      throw new SchemaError(unionError, key);
    }
    const [type] = info.types;
    return parseFormDataEntry(key, entry, type ?? "any", info);
  }
  const defaultPropertyType = typeof schema.additionalProperties == "object" ? schema.additionalProperties : { type: "string" };
  for (const key of schemaKeys) {
    const property = schema.properties ? schema.properties[key] : defaultPropertyType;
    assertSchema(property, key);
    const info = schemaInfo(property ?? defaultPropertyType, !((_a = schema.required) == null ? void 0 : _a.includes(key)), [
      key
    ]);
    if (!info)
      continue;
    if (!info.types.includes("boolean") && !schema.additionalProperties && !formData.has(key)) {
      continue;
    }
    const entries = formData.getAll(key);
    if (info.union && info.union.length > 1) {
      throw new SchemaError(unionError, key);
    }
    if (info.types.includes("array") || info.types.includes("set")) {
      const items = property.items;
      if (!items || typeof items == "boolean" || Array.isArray(items) && items.length != 1) {
        throw new SchemaError('Arrays must have a single "items" property that defines its type.', key);
      }
      const arrayType = Array.isArray(items) ? items[0] : items;
      assertSchema(arrayType, key);
      const arrayInfo = schemaInfo(arrayType, info.isOptional, [key]);
      if (!arrayInfo)
        continue;
      const arrayData = entries.map((e) => parseSingleEntry(key, e, arrayInfo));
      output[key] = info.types.includes("set") ? new Set(arrayData) : arrayData;
    } else {
      output[key] = parseSingleEntry(key, entries[entries.length - 1], info);
    }
  }
  return output;
}
function parseFormDataEntry(key, value, type, info) {
  if (!value) {
    if (type == "boolean" && info.isOptional && info.schema.default === true) {
      return false;
    }
    const defaultValue2 = defaultValues(info.schema, info.isOptional, [key]);
    if (info.schema.enum && defaultValue2 !== null && defaultValue2 !== void 0) {
      return value;
    }
    if (defaultValue2 !== void 0)
      return defaultValue2;
    if (info.isNullable)
      return null;
    if (info.isOptional)
      return void 0;
  }
  function typeError() {
    throw new SchemaError(type[0].toUpperCase() + type.slice(1) + ` type found. Set the dataType option to "json" and add use:enhance on the client to use nested data structures. More information: https://superforms.rocks/concepts/nested-data`, key);
  }
  switch (type) {
    case "string":
    case "any":
      return value;
    case "integer":
      return parseInt(value ?? "", 10);
    case "number":
      return parseFloat(value ?? "");
    case "boolean":
      return Boolean(value == "false" ? "" : value).valueOf();
    case "unix-time": {
      const date = new Date(value ?? "");
      return !isNaN(date) ? date : void 0;
    }
    case "bigint":
      return BigInt(value ?? ".");
    case "symbol":
      return Symbol(String(value));
    case "set":
    case "array":
    case "object":
      return typeError();
    default:
      throw new SuperFormError("Unsupported schema type for FormData: " + type);
  }
}

// node_modules/sveltekit-superforms/dist/superValidate.js
async function superValidate(data, adapter, options) {
  if (data && "superFormValidationLibrary" in data) {
    options = adapter;
    adapter = data;
    data = void 0;
  }
  const validator = adapter;
  const defaults2 = (options == null ? void 0 : options.defaults) ?? validator.defaults;
  const jsonSchema = validator.jsonSchema;
  const parsed = await parseRequest(data, jsonSchema, options);
  const addErrors = (options == null ? void 0 : options.errors) ?? ((options == null ? void 0 : options.strict) ? true : !!parsed.data);
  const parsedData = (options == null ? void 0 : options.strict) ? parsed.data ?? {} : mergeDefaults(parsed.data, defaults2);
  let status;
  if (!!parsed.data || addErrors) {
    status = await validator.validate(parsedData);
  } else {
    status = { success: false, issues: [] };
  }
  const valid = status.success;
  const errors = valid || !addErrors ? {} : mapErrors(status.issues, validator.shape);
  const dataWithDefaults = valid ? status.data : replaceInvalidDefaults((options == null ? void 0 : options.strict) ? mergeDefaults(parsedData, defaults2) : parsedData, defaults2, jsonSchema, status.issues, options == null ? void 0 : options.preprocessed);
  let outputData;
  if (jsonSchema.additionalProperties === false) {
    outputData = {};
    for (const key of Object.keys(jsonSchema.properties ?? {})) {
      if (key in dataWithDefaults)
        outputData[key] = dataWithDefaults[key];
    }
  } else {
    outputData = dataWithDefaults;
  }
  const output = {
    id: parsed.id ?? (options == null ? void 0 : options.id) ?? validator.id,
    valid,
    posted: parsed.posted,
    errors,
    data: outputData
  };
  if (!parsed.posted) {
    output.constraints = validator.constraints;
    if (Object.keys(validator.shape).length) {
      output.shape = validator.shape;
    }
  }
  return output;
}
function message(form, message2, options) {
  if ((options == null ? void 0 : options.status) && options.status >= 400) {
    form.valid = false;
  }
  form.message = message2;
  const remove = (options == null ? void 0 : options.removeFiles) !== false;
  const output = remove ? withFiles({ form }) : { form };
  return form.valid ? output : fail((options == null ? void 0 : options.status) ?? 400, output);
}
var setMessage = message;
function setError(form, path, error, options) {
  if (error == void 0 || typeof error !== "string" && !Array.isArray(error)) {
    options = error;
    error = path;
    path = "";
  }
  if (options === void 0)
    options = {};
  const errArr = Array.isArray(error) ? error : [error];
  if (!form.errors)
    form.errors = {};
  if (path === null || path === "") {
    if (!form.errors._errors)
      form.errors._errors = [];
    form.errors._errors = options.overwrite ? errArr : form.errors._errors.concat(errArr);
  } else {
    const realPath = splitPath(path);
    const leaf = traversePath(form.errors, realPath, ({ parent, key, value }) => {
      if (value === void 0)
        parent[key] = {};
      return parent[key];
    });
    if (leaf) {
      leaf.parent[leaf.key] = Array.isArray(leaf.value) && !options.overwrite ? leaf.value.concat(errArr) : errArr;
    }
  }
  form.valid = false;
  const output = options.removeFiles === false ? { form } : withFiles({ form });
  return fail(options.status ?? 400, output);
}
function withFiles(obj) {
  if (typeof obj !== "object")
    return obj;
  for (const key in obj) {
    const value = obj[key];
    if (value instanceof File)
      delete obj[key];
    else if (value && typeof value === "object")
      withFiles(value);
  }
  return obj;
}
var removeFiles = withFiles;

export {
  traversePath,
  traversePaths,
  splitPath,
  SuperFormError,
  SchemaError,
  booleanProxy,
  intProxy,
  numberProxy,
  dateProxy,
  stringProxy,
  arrayProxy,
  formFieldProxy,
  fieldProxy,
  superForm,
  defaults,
  defaultValues2 as defaultValues,
  actionResult,
  schemaShape,
  createJsonSchema,
  createAdapter,
  superValidate,
  message,
  setMessage,
  setError,
  withFiles,
  removeFiles,
  dist_default
};
//# sourceMappingURL=chunk-3YYHEB6O.js.map
